syntax = "proto3";

import "google/protobuf/timestamp.proto";

package muscle_manager_protocol;

// The MUSCLE Manager Protocol
service MuscleManager {
    // Sends a logged message to the Manager
    rpc SubmitLogMessage(LogMessage) returns (LogResult);

    // Sends a batch of profiling events to the Manager
    rpc SubmitProfileEvents(Profile) returns (ProfileResult);

    // Requests the global base settings
    rpc RequestSettings(SettingsRequest) returns (SettingsResult);

    // Registers a newly started kernel instance
    rpc RegisterInstance(RegistrationRequest) returns (RegistrationResult);

    // Requests information about peers
    rpc RequestPeers(PeerRequest) returns (PeerResult);

    // Deregisters an instance on shutdown
    rpc DeregisterInstance(DeregistrationRequest) returns (DeregistrationResult);
}

// Type of result
enum ResultStatus {
    RESULT_STATUS_SUCCESS = 0;
    RESULT_STATUS_ERROR = 1;
    RESULT_STATUS_PENDING = 2;
}

// MML operators
enum Operator {
    OPERATOR_NONE = 0;
    OPERATOR_F_INIT = 1;
    OPERATOR_O_I = 2;
    OPERATOR_S = 3;
    OPERATOR_B = 4;
    OPERATOR_O_F = 5;
    OPERATOR_MAP = 6;
}

// Log levels
enum LogLevel {
    LOG_LEVEL_DEBUG = 0;
    LOG_LEVEL_INFO = 1;
    LOG_LEVEL_WARNING = 3;
    LOG_LEVEL_ERROR = 4;
    LOG_LEVEL_CRITICAL = 5;
}

// A log message
message LogMessage {
    string instance_id = 1;
    google.protobuf.Timestamp timestamp = 3;
    LogLevel level = 4;
    string text = 5;
}

// Result of a SubmitLogMessage call, for future extensibility
message LogResult {}


// Port on a kernel
message Port {
    string name = 1;
    Operator operator = 2;
}


// Event type for profiling
enum ProfileEventType {
    PROFILE_EVENT_TYPE_REGISTER = 0;
    PROFILE_EVENT_TYPE_CONNECT = 4;
    PROFILE_EVENT_TYPE_DEREGISTER = 1;
    PROFILE_EVENT_TYPE_SEND = 2;
    PROFILE_EVENT_TYPE_RECEIVE = 3;
}

// Event for profiling
message ProfileEvent {
    string instance_id = 1;
    google.protobuf.Timestamp start_time = 2;
    google.protobuf.Timestamp stop_time = 3;
    ProfileEventType event_type = 4;
    Port port = 5;
    int32 port_length = 6;
    int32 slot = 7;
    int64 message_size = 8;
}

// A batch of profiling events for submission
message Profile {
    repeated ProfileEvent events = 1;
}

// Result of a profining event submission
message ProfileResult {
}


// Request to register a new instance
message RegistrationRequest {
    string instance_name = 1;
    repeated string network_locations = 2;
    repeated Port ports = 3;
}

// Result of a RegisterInstance call
message RegistrationResult {
    // if status is ERROR, error_message is present and contains a message
    ResultStatus status = 1;
    string error_message = 2;
}


// Conduit between kernels
message Conduit {
    string sender = 1;
    string receiver = 2;
}

// Request for network locations of peers
message PeerRequest {
    // name of requesting instance
    string instance_name = 1;
}

// Result of peer request
message PeerResult {
    // if this is PENDING, not all peers are available yet
    // the rest of the fields are only present on SUCCESS
    // if status is ERROR or PENDING, error_message is present and contains a
    // message
    ResultStatus status = 1;
    string error_message = 2;

    message PeerDimensions {
        // name of peer kernel (not instance)
        string peer_name = 1;
        repeated int32 dimensions = 2;
    }

    message PeerLocations {
        // name of peer instance (not kernel)
        string instance_name = 1;
        repeated string locations = 2;
    }

    repeated Conduit conduits = 3;
    repeated PeerDimensions peer_dimensions = 4;
    repeated PeerLocations peer_locations = 5;
}


// Supported setting value types (from yMMSL)
enum SettingValueType {
    SETTING_VALUE_TYPE_STRING = 0;
    SETTING_VALUE_TYPE_INT = 1;
    SETTING_VALUE_TYPE_FLOAT = 2;
    SETTING_VALUE_TYPE_BOOL = 3;
    SETTING_VALUE_TYPE_LIST_FLOAT = 4;
    SETTING_VALUE_TYPE_LIST_LIST_FLOAT = 5;
}

// Settings
message ListOfDouble {
    repeated double values = 1;
}

message ListOfListOfDouble {
    repeated ListOfDouble values = 1;
}

message Setting {
    string name = 1;
    SettingValueType value_type = 2;
    string value_string = 3;
    int64 value_int = 4;
    double value_float = 5;
    bool value_bool = 6;
    ListOfDouble value_list_float = 7;
    ListOfListOfDouble value_list_list_float = 8;
}

// Request for the base settings
message SettingsRequest {
    // no content, this requests the one and only base settings
}

// Result of settings request
message SettingsResult {
    repeated Setting setting_values = 1;
}


// Request to deregister an instance
message DeregistrationRequest {
    string instance_name = 1;
}

// Result of a RegisterInstance call
message DeregistrationResult {
    // if status is ERROR, error_message is present and contains a message
    ResultStatus status = 1;
    string error_message = 2;
}
