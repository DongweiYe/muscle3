// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: muscle_manager_protocol/muscle_manager_protocol.proto

#ifndef PROTOBUF_INCLUDED_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto
#define PROTOBUF_INCLUDED_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto();
namespace muscle_manager_protocol {
class Conduit;
class ConduitDefaultTypeInternal;
extern ConduitDefaultTypeInternal _Conduit_default_instance_;
class DeregistrationRequest;
class DeregistrationRequestDefaultTypeInternal;
extern DeregistrationRequestDefaultTypeInternal _DeregistrationRequest_default_instance_;
class DeregistrationResult;
class DeregistrationResultDefaultTypeInternal;
extern DeregistrationResultDefaultTypeInternal _DeregistrationResult_default_instance_;
class ListOfDouble;
class ListOfDoubleDefaultTypeInternal;
extern ListOfDoubleDefaultTypeInternal _ListOfDouble_default_instance_;
class ListOfListOfDouble;
class ListOfListOfDoubleDefaultTypeInternal;
extern ListOfListOfDoubleDefaultTypeInternal _ListOfListOfDouble_default_instance_;
class LogMessage;
class LogMessageDefaultTypeInternal;
extern LogMessageDefaultTypeInternal _LogMessage_default_instance_;
class LogResult;
class LogResultDefaultTypeInternal;
extern LogResultDefaultTypeInternal _LogResult_default_instance_;
class PeerRequest;
class PeerRequestDefaultTypeInternal;
extern PeerRequestDefaultTypeInternal _PeerRequest_default_instance_;
class PeerResult;
class PeerResultDefaultTypeInternal;
extern PeerResultDefaultTypeInternal _PeerResult_default_instance_;
class PeerResult_PeerDimensions;
class PeerResult_PeerDimensionsDefaultTypeInternal;
extern PeerResult_PeerDimensionsDefaultTypeInternal _PeerResult_PeerDimensions_default_instance_;
class PeerResult_PeerLocations;
class PeerResult_PeerLocationsDefaultTypeInternal;
extern PeerResult_PeerLocationsDefaultTypeInternal _PeerResult_PeerLocations_default_instance_;
class Port;
class PortDefaultTypeInternal;
extern PortDefaultTypeInternal _Port_default_instance_;
class Profile;
class ProfileDefaultTypeInternal;
extern ProfileDefaultTypeInternal _Profile_default_instance_;
class ProfileEvent;
class ProfileEventDefaultTypeInternal;
extern ProfileEventDefaultTypeInternal _ProfileEvent_default_instance_;
class ProfileResult;
class ProfileResultDefaultTypeInternal;
extern ProfileResultDefaultTypeInternal _ProfileResult_default_instance_;
class RegistrationRequest;
class RegistrationRequestDefaultTypeInternal;
extern RegistrationRequestDefaultTypeInternal _RegistrationRequest_default_instance_;
class RegistrationResult;
class RegistrationResultDefaultTypeInternal;
extern RegistrationResultDefaultTypeInternal _RegistrationResult_default_instance_;
class Setting;
class SettingDefaultTypeInternal;
extern SettingDefaultTypeInternal _Setting_default_instance_;
class SettingsRequest;
class SettingsRequestDefaultTypeInternal;
extern SettingsRequestDefaultTypeInternal _SettingsRequest_default_instance_;
class SettingsResult;
class SettingsResultDefaultTypeInternal;
extern SettingsResultDefaultTypeInternal _SettingsResult_default_instance_;
}  // namespace muscle_manager_protocol
namespace google {
namespace protobuf {
template<> ::muscle_manager_protocol::Conduit* Arena::CreateMaybeMessage<::muscle_manager_protocol::Conduit>(Arena*);
template<> ::muscle_manager_protocol::DeregistrationRequest* Arena::CreateMaybeMessage<::muscle_manager_protocol::DeregistrationRequest>(Arena*);
template<> ::muscle_manager_protocol::DeregistrationResult* Arena::CreateMaybeMessage<::muscle_manager_protocol::DeregistrationResult>(Arena*);
template<> ::muscle_manager_protocol::ListOfDouble* Arena::CreateMaybeMessage<::muscle_manager_protocol::ListOfDouble>(Arena*);
template<> ::muscle_manager_protocol::ListOfListOfDouble* Arena::CreateMaybeMessage<::muscle_manager_protocol::ListOfListOfDouble>(Arena*);
template<> ::muscle_manager_protocol::LogMessage* Arena::CreateMaybeMessage<::muscle_manager_protocol::LogMessage>(Arena*);
template<> ::muscle_manager_protocol::LogResult* Arena::CreateMaybeMessage<::muscle_manager_protocol::LogResult>(Arena*);
template<> ::muscle_manager_protocol::PeerRequest* Arena::CreateMaybeMessage<::muscle_manager_protocol::PeerRequest>(Arena*);
template<> ::muscle_manager_protocol::PeerResult* Arena::CreateMaybeMessage<::muscle_manager_protocol::PeerResult>(Arena*);
template<> ::muscle_manager_protocol::PeerResult_PeerDimensions* Arena::CreateMaybeMessage<::muscle_manager_protocol::PeerResult_PeerDimensions>(Arena*);
template<> ::muscle_manager_protocol::PeerResult_PeerLocations* Arena::CreateMaybeMessage<::muscle_manager_protocol::PeerResult_PeerLocations>(Arena*);
template<> ::muscle_manager_protocol::Port* Arena::CreateMaybeMessage<::muscle_manager_protocol::Port>(Arena*);
template<> ::muscle_manager_protocol::Profile* Arena::CreateMaybeMessage<::muscle_manager_protocol::Profile>(Arena*);
template<> ::muscle_manager_protocol::ProfileEvent* Arena::CreateMaybeMessage<::muscle_manager_protocol::ProfileEvent>(Arena*);
template<> ::muscle_manager_protocol::ProfileResult* Arena::CreateMaybeMessage<::muscle_manager_protocol::ProfileResult>(Arena*);
template<> ::muscle_manager_protocol::RegistrationRequest* Arena::CreateMaybeMessage<::muscle_manager_protocol::RegistrationRequest>(Arena*);
template<> ::muscle_manager_protocol::RegistrationResult* Arena::CreateMaybeMessage<::muscle_manager_protocol::RegistrationResult>(Arena*);
template<> ::muscle_manager_protocol::Setting* Arena::CreateMaybeMessage<::muscle_manager_protocol::Setting>(Arena*);
template<> ::muscle_manager_protocol::SettingsRequest* Arena::CreateMaybeMessage<::muscle_manager_protocol::SettingsRequest>(Arena*);
template<> ::muscle_manager_protocol::SettingsResult* Arena::CreateMaybeMessage<::muscle_manager_protocol::SettingsResult>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace muscle_manager_protocol {

enum ResultStatus {
  RESULT_STATUS_SUCCESS = 0,
  RESULT_STATUS_ERROR = 1,
  RESULT_STATUS_PENDING = 2,
  ResultStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ResultStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ResultStatus_IsValid(int value);
const ResultStatus ResultStatus_MIN = RESULT_STATUS_SUCCESS;
const ResultStatus ResultStatus_MAX = RESULT_STATUS_PENDING;
const int ResultStatus_ARRAYSIZE = ResultStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultStatus_descriptor();
inline const ::std::string& ResultStatus_Name(ResultStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultStatus_descriptor(), value);
}
inline bool ResultStatus_Parse(
    const ::std::string& name, ResultStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultStatus>(
    ResultStatus_descriptor(), name, value);
}
enum Operator {
  OPERATOR_NONE = 0,
  OPERATOR_F_INIT = 1,
  OPERATOR_O_I = 2,
  OPERATOR_S = 3,
  OPERATOR_B = 4,
  OPERATOR_O_F = 5,
  OPERATOR_MAP = 6,
  Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Operator_IsValid(int value);
const Operator Operator_MIN = OPERATOR_NONE;
const Operator Operator_MAX = OPERATOR_MAP;
const int Operator_ARRAYSIZE = Operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operator_descriptor();
inline const ::std::string& Operator_Name(Operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operator_descriptor(), value);
}
inline bool Operator_Parse(
    const ::std::string& name, Operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operator>(
    Operator_descriptor(), name, value);
}
enum LogLevel {
  LOG_LEVEL_DEBUG = 0,
  LOG_LEVEL_INFO = 1,
  LOG_LEVEL_WARNING = 3,
  LOG_LEVEL_ERROR = 4,
  LOG_LEVEL_CRITICAL = 5,
  LogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  LogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool LogLevel_IsValid(int value);
const LogLevel LogLevel_MIN = LOG_LEVEL_DEBUG;
const LogLevel LogLevel_MAX = LOG_LEVEL_CRITICAL;
const int LogLevel_ARRAYSIZE = LogLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogLevel_descriptor();
inline const ::std::string& LogLevel_Name(LogLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogLevel_descriptor(), value);
}
inline bool LogLevel_Parse(
    const ::std::string& name, LogLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogLevel>(
    LogLevel_descriptor(), name, value);
}
enum ProfileEventType {
  PROFILE_EVENT_TYPE_REGISTER = 0,
  PROFILE_EVENT_TYPE_CONNECT = 4,
  PROFILE_EVENT_TYPE_DEREGISTER = 1,
  PROFILE_EVENT_TYPE_SEND = 2,
  PROFILE_EVENT_TYPE_RECEIVE = 3,
  ProfileEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ProfileEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ProfileEventType_IsValid(int value);
const ProfileEventType ProfileEventType_MIN = PROFILE_EVENT_TYPE_REGISTER;
const ProfileEventType ProfileEventType_MAX = PROFILE_EVENT_TYPE_CONNECT;
const int ProfileEventType_ARRAYSIZE = ProfileEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProfileEventType_descriptor();
inline const ::std::string& ProfileEventType_Name(ProfileEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProfileEventType_descriptor(), value);
}
inline bool ProfileEventType_Parse(
    const ::std::string& name, ProfileEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProfileEventType>(
    ProfileEventType_descriptor(), name, value);
}
enum SettingValueType {
  SETTING_VALUE_TYPE_STRING = 0,
  SETTING_VALUE_TYPE_INT = 1,
  SETTING_VALUE_TYPE_FLOAT = 2,
  SETTING_VALUE_TYPE_BOOL = 3,
  SETTING_VALUE_TYPE_LIST_FLOAT = 4,
  SETTING_VALUE_TYPE_LIST_LIST_FLOAT = 5,
  SettingValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  SettingValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool SettingValueType_IsValid(int value);
const SettingValueType SettingValueType_MIN = SETTING_VALUE_TYPE_STRING;
const SettingValueType SettingValueType_MAX = SETTING_VALUE_TYPE_LIST_LIST_FLOAT;
const int SettingValueType_ARRAYSIZE = SettingValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SettingValueType_descriptor();
inline const ::std::string& SettingValueType_Name(SettingValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SettingValueType_descriptor(), value);
}
inline bool SettingValueType_Parse(
    const ::std::string& name, SettingValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SettingValueType>(
    SettingValueType_descriptor(), name, value);
}
// ===================================================================

class LogMessage :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.LogMessage) */ {
 public:
  LogMessage();
  virtual ~LogMessage();

  LogMessage(const LogMessage& from);

  inline LogMessage& operator=(const LogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogMessage(LogMessage&& from) noexcept
    : LogMessage() {
    *this = ::std::move(from);
  }

  inline LogMessage& operator=(LogMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogMessage* internal_default_instance() {
    return reinterpret_cast<const LogMessage*>(
               &_LogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogMessage* other);
  friend void swap(LogMessage& a, LogMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogMessage* New() const final {
    return CreateMaybeMessage<LogMessage>(nullptr);
  }

  LogMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogMessage& from);
  void MergeFrom(const LogMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_id(::std::string&& value);
  #endif
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);

  // string text = 5;
  void clear_text();
  static const int kTextFieldNumber = 5;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // .muscle_manager_protocol.LogLevel level = 4;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::muscle_manager_protocol::LogLevel level() const;
  void set_level(::muscle_manager_protocol::LogLevel value);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.LogMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::Timestamp* timestamp_;
  int level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class LogResult :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.LogResult) */ {
 public:
  LogResult();
  virtual ~LogResult();

  LogResult(const LogResult& from);

  inline LogResult& operator=(const LogResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogResult(LogResult&& from) noexcept
    : LogResult() {
    *this = ::std::move(from);
  }

  inline LogResult& operator=(LogResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogResult* internal_default_instance() {
    return reinterpret_cast<const LogResult*>(
               &_LogResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LogResult* other);
  friend void swap(LogResult& a, LogResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogResult* New() const final {
    return CreateMaybeMessage<LogResult>(nullptr);
  }

  LogResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogResult& from);
  void MergeFrom(const LogResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.LogResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Port :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.Port) */ {
 public:
  Port();
  virtual ~Port();

  Port(const Port& from);

  inline Port& operator=(const Port& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Port(Port&& from) noexcept
    : Port() {
    *this = ::std::move(from);
  }

  inline Port& operator=(Port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Port* internal_default_instance() {
    return reinterpret_cast<const Port*>(
               &_Port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Port* other);
  friend void swap(Port& a, Port& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Port* New() const final {
    return CreateMaybeMessage<Port>(nullptr);
  }

  Port* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Port>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Port& from);
  void MergeFrom(const Port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Port* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .muscle_manager_protocol.Operator operator = 2;
  void clear_operator_();
  static const int kOperatorFieldNumber = 2;
  ::muscle_manager_protocol::Operator operator_() const;
  void set_operator_(::muscle_manager_protocol::Operator value);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.Port)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int operator__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ProfileEvent :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.ProfileEvent) */ {
 public:
  ProfileEvent();
  virtual ~ProfileEvent();

  ProfileEvent(const ProfileEvent& from);

  inline ProfileEvent& operator=(const ProfileEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileEvent(ProfileEvent&& from) noexcept
    : ProfileEvent() {
    *this = ::std::move(from);
  }

  inline ProfileEvent& operator=(ProfileEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProfileEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileEvent* internal_default_instance() {
    return reinterpret_cast<const ProfileEvent*>(
               &_ProfileEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProfileEvent* other);
  friend void swap(ProfileEvent& a, ProfileEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileEvent* New() const final {
    return CreateMaybeMessage<ProfileEvent>(nullptr);
  }

  ProfileEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProfileEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProfileEvent& from);
  void MergeFrom(const ProfileEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_id(::std::string&& value);
  #endif
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);

  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp stop_time = 3;
  bool has_stop_time() const;
  void clear_stop_time();
  static const int kStopTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& stop_time() const;
  ::google::protobuf::Timestamp* release_stop_time();
  ::google::protobuf::Timestamp* mutable_stop_time();
  void set_allocated_stop_time(::google::protobuf::Timestamp* stop_time);

  // .muscle_manager_protocol.Port port = 5;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 5;
  const ::muscle_manager_protocol::Port& port() const;
  ::muscle_manager_protocol::Port* release_port();
  ::muscle_manager_protocol::Port* mutable_port();
  void set_allocated_port(::muscle_manager_protocol::Port* port);

  // .muscle_manager_protocol.ProfileEventType event_type = 4;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 4;
  ::muscle_manager_protocol::ProfileEventType event_type() const;
  void set_event_type(::muscle_manager_protocol::ProfileEventType value);

  // int32 port_length = 6;
  void clear_port_length();
  static const int kPortLengthFieldNumber = 6;
  ::google::protobuf::int32 port_length() const;
  void set_port_length(::google::protobuf::int32 value);

  // int64 message_size = 8;
  void clear_message_size();
  static const int kMessageSizeFieldNumber = 8;
  ::google::protobuf::int64 message_size() const;
  void set_message_size(::google::protobuf::int64 value);

  // int32 slot = 7;
  void clear_slot();
  static const int kSlotFieldNumber = 7;
  ::google::protobuf::int32 slot() const;
  void set_slot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.ProfileEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* stop_time_;
  ::muscle_manager_protocol::Port* port_;
  int event_type_;
  ::google::protobuf::int32 port_length_;
  ::google::protobuf::int64 message_size_;
  ::google::protobuf::int32 slot_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Profile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.Profile) */ {
 public:
  Profile();
  virtual ~Profile();

  Profile(const Profile& from);

  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile(Profile&& from) noexcept
    : Profile() {
    *this = ::std::move(from);
  }

  inline Profile& operator=(Profile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Profile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profile* internal_default_instance() {
    return reinterpret_cast<const Profile*>(
               &_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Profile* other);
  friend void swap(Profile& a, Profile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile* New() const final {
    return CreateMaybeMessage<Profile>(nullptr);
  }

  Profile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Profile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Profile& from);
  void MergeFrom(const Profile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .muscle_manager_protocol.ProfileEvent events = 1;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 1;
  ::muscle_manager_protocol::ProfileEvent* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::ProfileEvent >*
      mutable_events();
  const ::muscle_manager_protocol::ProfileEvent& events(int index) const;
  ::muscle_manager_protocol::ProfileEvent* add_events();
  const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::ProfileEvent >&
      events() const;

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.Profile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::ProfileEvent > events_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ProfileResult :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.ProfileResult) */ {
 public:
  ProfileResult();
  virtual ~ProfileResult();

  ProfileResult(const ProfileResult& from);

  inline ProfileResult& operator=(const ProfileResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileResult(ProfileResult&& from) noexcept
    : ProfileResult() {
    *this = ::std::move(from);
  }

  inline ProfileResult& operator=(ProfileResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProfileResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileResult* internal_default_instance() {
    return reinterpret_cast<const ProfileResult*>(
               &_ProfileResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ProfileResult* other);
  friend void swap(ProfileResult& a, ProfileResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileResult* New() const final {
    return CreateMaybeMessage<ProfileResult>(nullptr);
  }

  ProfileResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProfileResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProfileResult& from);
  void MergeFrom(const ProfileResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.ProfileResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class RegistrationRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.RegistrationRequest) */ {
 public:
  RegistrationRequest();
  virtual ~RegistrationRequest();

  RegistrationRequest(const RegistrationRequest& from);

  inline RegistrationRequest& operator=(const RegistrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegistrationRequest(RegistrationRequest&& from) noexcept
    : RegistrationRequest() {
    *this = ::std::move(from);
  }

  inline RegistrationRequest& operator=(RegistrationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RegistrationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistrationRequest* internal_default_instance() {
    return reinterpret_cast<const RegistrationRequest*>(
               &_RegistrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RegistrationRequest* other);
  friend void swap(RegistrationRequest& a, RegistrationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegistrationRequest* New() const final {
    return CreateMaybeMessage<RegistrationRequest>(nullptr);
  }

  RegistrationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegistrationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegistrationRequest& from);
  void MergeFrom(const RegistrationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistrationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string network_locations = 2;
  int network_locations_size() const;
  void clear_network_locations();
  static const int kNetworkLocationsFieldNumber = 2;
  const ::std::string& network_locations(int index) const;
  ::std::string* mutable_network_locations(int index);
  void set_network_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_network_locations(int index, ::std::string&& value);
  #endif
  void set_network_locations(int index, const char* value);
  void set_network_locations(int index, const char* value, size_t size);
  ::std::string* add_network_locations();
  void add_network_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_network_locations(::std::string&& value);
  #endif
  void add_network_locations(const char* value);
  void add_network_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& network_locations() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_network_locations();

  // repeated .muscle_manager_protocol.Port ports = 3;
  int ports_size() const;
  void clear_ports();
  static const int kPortsFieldNumber = 3;
  ::muscle_manager_protocol::Port* mutable_ports(int index);
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Port >*
      mutable_ports();
  const ::muscle_manager_protocol::Port& ports(int index) const;
  ::muscle_manager_protocol::Port* add_ports();
  const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Port >&
      ports() const;

  // string instance_name = 1;
  void clear_instance_name();
  static const int kInstanceNameFieldNumber = 1;
  const ::std::string& instance_name() const;
  void set_instance_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_name(::std::string&& value);
  #endif
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  ::std::string* mutable_instance_name();
  ::std::string* release_instance_name();
  void set_allocated_instance_name(::std::string* instance_name);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.RegistrationRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> network_locations_;
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Port > ports_;
  ::google::protobuf::internal::ArenaStringPtr instance_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class RegistrationResult :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.RegistrationResult) */ {
 public:
  RegistrationResult();
  virtual ~RegistrationResult();

  RegistrationResult(const RegistrationResult& from);

  inline RegistrationResult& operator=(const RegistrationResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegistrationResult(RegistrationResult&& from) noexcept
    : RegistrationResult() {
    *this = ::std::move(from);
  }

  inline RegistrationResult& operator=(RegistrationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RegistrationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistrationResult* internal_default_instance() {
    return reinterpret_cast<const RegistrationResult*>(
               &_RegistrationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RegistrationResult* other);
  friend void swap(RegistrationResult& a, RegistrationResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegistrationResult* New() const final {
    return CreateMaybeMessage<RegistrationResult>(nullptr);
  }

  RegistrationResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegistrationResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegistrationResult& from);
  void MergeFrom(const RegistrationResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistrationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // .muscle_manager_protocol.ResultStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::muscle_manager_protocol::ResultStatus status() const;
  void set_status(::muscle_manager_protocol::ResultStatus value);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.RegistrationResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Conduit :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.Conduit) */ {
 public:
  Conduit();
  virtual ~Conduit();

  Conduit(const Conduit& from);

  inline Conduit& operator=(const Conduit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Conduit(Conduit&& from) noexcept
    : Conduit() {
    *this = ::std::move(from);
  }

  inline Conduit& operator=(Conduit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Conduit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conduit* internal_default_instance() {
    return reinterpret_cast<const Conduit*>(
               &_Conduit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Conduit* other);
  friend void swap(Conduit& a, Conduit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Conduit* New() const final {
    return CreateMaybeMessage<Conduit>(nullptr);
  }

  Conduit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Conduit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Conduit& from);
  void MergeFrom(const Conduit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conduit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sender = 1;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // string receiver = 2;
  void clear_receiver();
  static const int kReceiverFieldNumber = 2;
  const ::std::string& receiver() const;
  void set_receiver(const ::std::string& value);
  #if LANG_CXX11
  void set_receiver(::std::string&& value);
  #endif
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  ::std::string* mutable_receiver();
  ::std::string* release_receiver();
  void set_allocated_receiver(::std::string* receiver);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.Conduit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr receiver_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class PeerRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.PeerRequest) */ {
 public:
  PeerRequest();
  virtual ~PeerRequest();

  PeerRequest(const PeerRequest& from);

  inline PeerRequest& operator=(const PeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerRequest(PeerRequest&& from) noexcept
    : PeerRequest() {
    *this = ::std::move(from);
  }

  inline PeerRequest& operator=(PeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerRequest* internal_default_instance() {
    return reinterpret_cast<const PeerRequest*>(
               &_PeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(PeerRequest* other);
  friend void swap(PeerRequest& a, PeerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerRequest* New() const final {
    return CreateMaybeMessage<PeerRequest>(nullptr);
  }

  PeerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerRequest& from);
  void MergeFrom(const PeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_name = 1;
  void clear_instance_name();
  static const int kInstanceNameFieldNumber = 1;
  const ::std::string& instance_name() const;
  void set_instance_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_name(::std::string&& value);
  #endif
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  ::std::string* mutable_instance_name();
  ::std::string* release_instance_name();
  void set_allocated_instance_name(::std::string* instance_name);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.PeerRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class PeerResult_PeerDimensions :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.PeerResult.PeerDimensions) */ {
 public:
  PeerResult_PeerDimensions();
  virtual ~PeerResult_PeerDimensions();

  PeerResult_PeerDimensions(const PeerResult_PeerDimensions& from);

  inline PeerResult_PeerDimensions& operator=(const PeerResult_PeerDimensions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerResult_PeerDimensions(PeerResult_PeerDimensions&& from) noexcept
    : PeerResult_PeerDimensions() {
    *this = ::std::move(from);
  }

  inline PeerResult_PeerDimensions& operator=(PeerResult_PeerDimensions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PeerResult_PeerDimensions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerResult_PeerDimensions* internal_default_instance() {
    return reinterpret_cast<const PeerResult_PeerDimensions*>(
               &_PeerResult_PeerDimensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(PeerResult_PeerDimensions* other);
  friend void swap(PeerResult_PeerDimensions& a, PeerResult_PeerDimensions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerResult_PeerDimensions* New() const final {
    return CreateMaybeMessage<PeerResult_PeerDimensions>(nullptr);
  }

  PeerResult_PeerDimensions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerResult_PeerDimensions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerResult_PeerDimensions& from);
  void MergeFrom(const PeerResult_PeerDimensions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerResult_PeerDimensions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 dimensions = 2;
  int dimensions_size() const;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 2;
  ::google::protobuf::int32 dimensions(int index) const;
  void set_dimensions(int index, ::google::protobuf::int32 value);
  void add_dimensions(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dimensions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dimensions();

  // string peer_name = 1;
  void clear_peer_name();
  static const int kPeerNameFieldNumber = 1;
  const ::std::string& peer_name() const;
  void set_peer_name(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_name(::std::string&& value);
  #endif
  void set_peer_name(const char* value);
  void set_peer_name(const char* value, size_t size);
  ::std::string* mutable_peer_name();
  ::std::string* release_peer_name();
  void set_allocated_peer_name(::std::string* peer_name);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.PeerResult.PeerDimensions)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dimensions_;
  mutable std::atomic<int> _dimensions_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr peer_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class PeerResult_PeerLocations :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.PeerResult.PeerLocations) */ {
 public:
  PeerResult_PeerLocations();
  virtual ~PeerResult_PeerLocations();

  PeerResult_PeerLocations(const PeerResult_PeerLocations& from);

  inline PeerResult_PeerLocations& operator=(const PeerResult_PeerLocations& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerResult_PeerLocations(PeerResult_PeerLocations&& from) noexcept
    : PeerResult_PeerLocations() {
    *this = ::std::move(from);
  }

  inline PeerResult_PeerLocations& operator=(PeerResult_PeerLocations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PeerResult_PeerLocations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerResult_PeerLocations* internal_default_instance() {
    return reinterpret_cast<const PeerResult_PeerLocations*>(
               &_PeerResult_PeerLocations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(PeerResult_PeerLocations* other);
  friend void swap(PeerResult_PeerLocations& a, PeerResult_PeerLocations& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerResult_PeerLocations* New() const final {
    return CreateMaybeMessage<PeerResult_PeerLocations>(nullptr);
  }

  PeerResult_PeerLocations* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerResult_PeerLocations>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerResult_PeerLocations& from);
  void MergeFrom(const PeerResult_PeerLocations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerResult_PeerLocations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string locations = 2;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 2;
  const ::std::string& locations(int index) const;
  ::std::string* mutable_locations(int index);
  void set_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_locations(int index, ::std::string&& value);
  #endif
  void set_locations(int index, const char* value);
  void set_locations(int index, const char* value, size_t size);
  ::std::string* add_locations();
  void add_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_locations(::std::string&& value);
  #endif
  void add_locations(const char* value);
  void add_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& locations() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_locations();

  // string instance_name = 1;
  void clear_instance_name();
  static const int kInstanceNameFieldNumber = 1;
  const ::std::string& instance_name() const;
  void set_instance_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_name(::std::string&& value);
  #endif
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  ::std::string* mutable_instance_name();
  ::std::string* release_instance_name();
  void set_allocated_instance_name(::std::string* instance_name);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.PeerResult.PeerLocations)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> locations_;
  ::google::protobuf::internal::ArenaStringPtr instance_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class PeerResult :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.PeerResult) */ {
 public:
  PeerResult();
  virtual ~PeerResult();

  PeerResult(const PeerResult& from);

  inline PeerResult& operator=(const PeerResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerResult(PeerResult&& from) noexcept
    : PeerResult() {
    *this = ::std::move(from);
  }

  inline PeerResult& operator=(PeerResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PeerResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerResult* internal_default_instance() {
    return reinterpret_cast<const PeerResult*>(
               &_PeerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(PeerResult* other);
  friend void swap(PeerResult& a, PeerResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerResult* New() const final {
    return CreateMaybeMessage<PeerResult>(nullptr);
  }

  PeerResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerResult& from);
  void MergeFrom(const PeerResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PeerResult_PeerDimensions PeerDimensions;
  typedef PeerResult_PeerLocations PeerLocations;

  // accessors -------------------------------------------------------

  // repeated .muscle_manager_protocol.Conduit conduits = 3;
  int conduits_size() const;
  void clear_conduits();
  static const int kConduitsFieldNumber = 3;
  ::muscle_manager_protocol::Conduit* mutable_conduits(int index);
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Conduit >*
      mutable_conduits();
  const ::muscle_manager_protocol::Conduit& conduits(int index) const;
  ::muscle_manager_protocol::Conduit* add_conduits();
  const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Conduit >&
      conduits() const;

  // repeated .muscle_manager_protocol.PeerResult.PeerDimensions peer_dimensions = 4;
  int peer_dimensions_size() const;
  void clear_peer_dimensions();
  static const int kPeerDimensionsFieldNumber = 4;
  ::muscle_manager_protocol::PeerResult_PeerDimensions* mutable_peer_dimensions(int index);
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::PeerResult_PeerDimensions >*
      mutable_peer_dimensions();
  const ::muscle_manager_protocol::PeerResult_PeerDimensions& peer_dimensions(int index) const;
  ::muscle_manager_protocol::PeerResult_PeerDimensions* add_peer_dimensions();
  const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::PeerResult_PeerDimensions >&
      peer_dimensions() const;

  // repeated .muscle_manager_protocol.PeerResult.PeerLocations peer_locations = 5;
  int peer_locations_size() const;
  void clear_peer_locations();
  static const int kPeerLocationsFieldNumber = 5;
  ::muscle_manager_protocol::PeerResult_PeerLocations* mutable_peer_locations(int index);
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::PeerResult_PeerLocations >*
      mutable_peer_locations();
  const ::muscle_manager_protocol::PeerResult_PeerLocations& peer_locations(int index) const;
  ::muscle_manager_protocol::PeerResult_PeerLocations* add_peer_locations();
  const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::PeerResult_PeerLocations >&
      peer_locations() const;

  // string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // .muscle_manager_protocol.ResultStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::muscle_manager_protocol::ResultStatus status() const;
  void set_status(::muscle_manager_protocol::ResultStatus value);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.PeerResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Conduit > conduits_;
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::PeerResult_PeerDimensions > peer_dimensions_;
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::PeerResult_PeerLocations > peer_locations_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListOfDouble :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.ListOfDouble) */ {
 public:
  ListOfDouble();
  virtual ~ListOfDouble();

  ListOfDouble(const ListOfDouble& from);

  inline ListOfDouble& operator=(const ListOfDouble& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListOfDouble(ListOfDouble&& from) noexcept
    : ListOfDouble() {
    *this = ::std::move(from);
  }

  inline ListOfDouble& operator=(ListOfDouble&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListOfDouble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOfDouble* internal_default_instance() {
    return reinterpret_cast<const ListOfDouble*>(
               &_ListOfDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ListOfDouble* other);
  friend void swap(ListOfDouble& a, ListOfDouble& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListOfDouble* New() const final {
    return CreateMaybeMessage<ListOfDouble>(nullptr);
  }

  ListOfDouble* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListOfDouble>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListOfDouble& from);
  void MergeFrom(const ListOfDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOfDouble* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::google::protobuf::RepeatedField< double >&
      values() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.ListOfDouble)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListOfListOfDouble :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.ListOfListOfDouble) */ {
 public:
  ListOfListOfDouble();
  virtual ~ListOfListOfDouble();

  ListOfListOfDouble(const ListOfListOfDouble& from);

  inline ListOfListOfDouble& operator=(const ListOfListOfDouble& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListOfListOfDouble(ListOfListOfDouble&& from) noexcept
    : ListOfListOfDouble() {
    *this = ::std::move(from);
  }

  inline ListOfListOfDouble& operator=(ListOfListOfDouble&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListOfListOfDouble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOfListOfDouble* internal_default_instance() {
    return reinterpret_cast<const ListOfListOfDouble*>(
               &_ListOfListOfDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ListOfListOfDouble* other);
  friend void swap(ListOfListOfDouble& a, ListOfListOfDouble& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListOfListOfDouble* New() const final {
    return CreateMaybeMessage<ListOfListOfDouble>(nullptr);
  }

  ListOfListOfDouble* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListOfListOfDouble>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListOfListOfDouble& from);
  void MergeFrom(const ListOfListOfDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOfListOfDouble* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .muscle_manager_protocol.ListOfDouble values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  ::muscle_manager_protocol::ListOfDouble* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::ListOfDouble >*
      mutable_values();
  const ::muscle_manager_protocol::ListOfDouble& values(int index) const;
  ::muscle_manager_protocol::ListOfDouble* add_values();
  const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::ListOfDouble >&
      values() const;

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.ListOfListOfDouble)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::ListOfDouble > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Setting :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.Setting) */ {
 public:
  Setting();
  virtual ~Setting();

  Setting(const Setting& from);

  inline Setting& operator=(const Setting& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Setting(Setting&& from) noexcept
    : Setting() {
    *this = ::std::move(from);
  }

  inline Setting& operator=(Setting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Setting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Setting* internal_default_instance() {
    return reinterpret_cast<const Setting*>(
               &_Setting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Setting* other);
  friend void swap(Setting& a, Setting& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Setting* New() const final {
    return CreateMaybeMessage<Setting>(nullptr);
  }

  Setting* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Setting>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Setting& from);
  void MergeFrom(const Setting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Setting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value_string = 3;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  const ::std::string& value_string() const;
  void set_value_string(const ::std::string& value);
  #if LANG_CXX11
  void set_value_string(::std::string&& value);
  #endif
  void set_value_string(const char* value);
  void set_value_string(const char* value, size_t size);
  ::std::string* mutable_value_string();
  ::std::string* release_value_string();
  void set_allocated_value_string(::std::string* value_string);

  // .muscle_manager_protocol.ListOfDouble value_list_float = 7;
  bool has_value_list_float() const;
  void clear_value_list_float();
  static const int kValueListFloatFieldNumber = 7;
  const ::muscle_manager_protocol::ListOfDouble& value_list_float() const;
  ::muscle_manager_protocol::ListOfDouble* release_value_list_float();
  ::muscle_manager_protocol::ListOfDouble* mutable_value_list_float();
  void set_allocated_value_list_float(::muscle_manager_protocol::ListOfDouble* value_list_float);

  // .muscle_manager_protocol.ListOfListOfDouble value_list_list_float = 8;
  bool has_value_list_list_float() const;
  void clear_value_list_list_float();
  static const int kValueListListFloatFieldNumber = 8;
  const ::muscle_manager_protocol::ListOfListOfDouble& value_list_list_float() const;
  ::muscle_manager_protocol::ListOfListOfDouble* release_value_list_list_float();
  ::muscle_manager_protocol::ListOfListOfDouble* mutable_value_list_list_float();
  void set_allocated_value_list_list_float(::muscle_manager_protocol::ListOfListOfDouble* value_list_list_float);

  // int64 value_int = 4;
  void clear_value_int();
  static const int kValueIntFieldNumber = 4;
  ::google::protobuf::int64 value_int() const;
  void set_value_int(::google::protobuf::int64 value);

  // .muscle_manager_protocol.SettingValueType value_type = 2;
  void clear_value_type();
  static const int kValueTypeFieldNumber = 2;
  ::muscle_manager_protocol::SettingValueType value_type() const;
  void set_value_type(::muscle_manager_protocol::SettingValueType value);

  // bool value_bool = 6;
  void clear_value_bool();
  static const int kValueBoolFieldNumber = 6;
  bool value_bool() const;
  void set_value_bool(bool value);

  // double value_float = 5;
  void clear_value_float();
  static const int kValueFloatFieldNumber = 5;
  double value_float() const;
  void set_value_float(double value);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.Setting)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_string_;
  ::muscle_manager_protocol::ListOfDouble* value_list_float_;
  ::muscle_manager_protocol::ListOfListOfDouble* value_list_list_float_;
  ::google::protobuf::int64 value_int_;
  int value_type_;
  bool value_bool_;
  double value_float_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class SettingsRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.SettingsRequest) */ {
 public:
  SettingsRequest();
  virtual ~SettingsRequest();

  SettingsRequest(const SettingsRequest& from);

  inline SettingsRequest& operator=(const SettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettingsRequest(SettingsRequest&& from) noexcept
    : SettingsRequest() {
    *this = ::std::move(from);
  }

  inline SettingsRequest& operator=(SettingsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SettingsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingsRequest* internal_default_instance() {
    return reinterpret_cast<const SettingsRequest*>(
               &_SettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(SettingsRequest* other);
  friend void swap(SettingsRequest& a, SettingsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettingsRequest* New() const final {
    return CreateMaybeMessage<SettingsRequest>(nullptr);
  }

  SettingsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SettingsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SettingsRequest& from);
  void MergeFrom(const SettingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.SettingsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class SettingsResult :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.SettingsResult) */ {
 public:
  SettingsResult();
  virtual ~SettingsResult();

  SettingsResult(const SettingsResult& from);

  inline SettingsResult& operator=(const SettingsResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettingsResult(SettingsResult&& from) noexcept
    : SettingsResult() {
    *this = ::std::move(from);
  }

  inline SettingsResult& operator=(SettingsResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SettingsResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingsResult* internal_default_instance() {
    return reinterpret_cast<const SettingsResult*>(
               &_SettingsResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(SettingsResult* other);
  friend void swap(SettingsResult& a, SettingsResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettingsResult* New() const final {
    return CreateMaybeMessage<SettingsResult>(nullptr);
  }

  SettingsResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SettingsResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SettingsResult& from);
  void MergeFrom(const SettingsResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .muscle_manager_protocol.Setting setting_values = 1;
  int setting_values_size() const;
  void clear_setting_values();
  static const int kSettingValuesFieldNumber = 1;
  ::muscle_manager_protocol::Setting* mutable_setting_values(int index);
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Setting >*
      mutable_setting_values();
  const ::muscle_manager_protocol::Setting& setting_values(int index) const;
  ::muscle_manager_protocol::Setting* add_setting_values();
  const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Setting >&
      setting_values() const;

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.SettingsResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Setting > setting_values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class DeregistrationRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.DeregistrationRequest) */ {
 public:
  DeregistrationRequest();
  virtual ~DeregistrationRequest();

  DeregistrationRequest(const DeregistrationRequest& from);

  inline DeregistrationRequest& operator=(const DeregistrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeregistrationRequest(DeregistrationRequest&& from) noexcept
    : DeregistrationRequest() {
    *this = ::std::move(from);
  }

  inline DeregistrationRequest& operator=(DeregistrationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeregistrationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeregistrationRequest* internal_default_instance() {
    return reinterpret_cast<const DeregistrationRequest*>(
               &_DeregistrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(DeregistrationRequest* other);
  friend void swap(DeregistrationRequest& a, DeregistrationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeregistrationRequest* New() const final {
    return CreateMaybeMessage<DeregistrationRequest>(nullptr);
  }

  DeregistrationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeregistrationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeregistrationRequest& from);
  void MergeFrom(const DeregistrationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeregistrationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_name = 1;
  void clear_instance_name();
  static const int kInstanceNameFieldNumber = 1;
  const ::std::string& instance_name() const;
  void set_instance_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_name(::std::string&& value);
  #endif
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  ::std::string* mutable_instance_name();
  ::std::string* release_instance_name();
  void set_allocated_instance_name(::std::string* instance_name);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.DeregistrationRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class DeregistrationResult :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:muscle_manager_protocol.DeregistrationResult) */ {
 public:
  DeregistrationResult();
  virtual ~DeregistrationResult();

  DeregistrationResult(const DeregistrationResult& from);

  inline DeregistrationResult& operator=(const DeregistrationResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeregistrationResult(DeregistrationResult&& from) noexcept
    : DeregistrationResult() {
    *this = ::std::move(from);
  }

  inline DeregistrationResult& operator=(DeregistrationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeregistrationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeregistrationResult* internal_default_instance() {
    return reinterpret_cast<const DeregistrationResult*>(
               &_DeregistrationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(DeregistrationResult* other);
  friend void swap(DeregistrationResult& a, DeregistrationResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeregistrationResult* New() const final {
    return CreateMaybeMessage<DeregistrationResult>(nullptr);
  }

  DeregistrationResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeregistrationResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeregistrationResult& from);
  void MergeFrom(const DeregistrationResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeregistrationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // .muscle_manager_protocol.ResultStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::muscle_manager_protocol::ResultStatus status() const;
  void set_status(::muscle_manager_protocol::ResultStatus value);

  // @@protoc_insertion_point(class_scope:muscle_manager_protocol.DeregistrationResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogMessage

// string instance_id = 1;
inline void LogMessage::clear_instance_id() {
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogMessage::instance_id() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.LogMessage.instance_id)
  return instance_id_.GetNoArena();
}
inline void LogMessage::set_instance_id(const ::std::string& value) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.LogMessage.instance_id)
}
#if LANG_CXX11
inline void LogMessage::set_instance_id(::std::string&& value) {
  
  instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.LogMessage.instance_id)
}
#endif
inline void LogMessage::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.LogMessage.instance_id)
}
inline void LogMessage::set_instance_id(const char* value, size_t size) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.LogMessage.instance_id)
}
inline ::std::string* LogMessage::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.LogMessage.instance_id)
  return instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogMessage::release_instance_id() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.LogMessage.instance_id)
  
  return instance_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMessage::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.LogMessage.instance_id)
}

// .google.protobuf.Timestamp timestamp = 3;
inline bool LogMessage::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline const ::google::protobuf::Timestamp& LogMessage::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.LogMessage.timestamp)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* LogMessage::release_timestamp() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.LogMessage.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* LogMessage::mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.LogMessage.timestamp)
  return timestamp_;
}
inline void LogMessage::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.LogMessage.timestamp)
}

// .muscle_manager_protocol.LogLevel level = 4;
inline void LogMessage::clear_level() {
  level_ = 0;
}
inline ::muscle_manager_protocol::LogLevel LogMessage::level() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.LogMessage.level)
  return static_cast< ::muscle_manager_protocol::LogLevel >(level_);
}
inline void LogMessage::set_level(::muscle_manager_protocol::LogLevel value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.LogMessage.level)
}

// string text = 5;
inline void LogMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogMessage::text() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.LogMessage.text)
  return text_.GetNoArena();
}
inline void LogMessage::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.LogMessage.text)
}
#if LANG_CXX11
inline void LogMessage::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.LogMessage.text)
}
#endif
inline void LogMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.LogMessage.text)
}
inline void LogMessage::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.LogMessage.text)
}
inline ::std::string* LogMessage::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.LogMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogMessage::release_text() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.LogMessage.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMessage::set_allocated_text(::std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.LogMessage.text)
}

// -------------------------------------------------------------------

// LogResult

// -------------------------------------------------------------------

// Port

// string name = 1;
inline void Port::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Port::name() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Port.name)
  return name_.GetNoArena();
}
inline void Port::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.Port.name)
}
#if LANG_CXX11
inline void Port::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.Port.name)
}
#endif
inline void Port::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.Port.name)
}
inline void Port::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.Port.name)
}
inline ::std::string* Port::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.Port.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Port::release_name() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.Port.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Port::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.Port.name)
}

// .muscle_manager_protocol.Operator operator = 2;
inline void Port::clear_operator_() {
  operator__ = 0;
}
inline ::muscle_manager_protocol::Operator Port::operator_() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Port.operator)
  return static_cast< ::muscle_manager_protocol::Operator >(operator__);
}
inline void Port::set_operator_(::muscle_manager_protocol::Operator value) {
  
  operator__ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.Port.operator)
}

// -------------------------------------------------------------------

// ProfileEvent

// string instance_id = 1;
inline void ProfileEvent::clear_instance_id() {
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileEvent::instance_id() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.ProfileEvent.instance_id)
  return instance_id_.GetNoArena();
}
inline void ProfileEvent::set_instance_id(const ::std::string& value) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.ProfileEvent.instance_id)
}
#if LANG_CXX11
inline void ProfileEvent::set_instance_id(::std::string&& value) {
  
  instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.ProfileEvent.instance_id)
}
#endif
inline void ProfileEvent::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.ProfileEvent.instance_id)
}
inline void ProfileEvent::set_instance_id(const char* value, size_t size) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.ProfileEvent.instance_id)
}
inline ::std::string* ProfileEvent::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.ProfileEvent.instance_id)
  return instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileEvent::release_instance_id() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.ProfileEvent.instance_id)
  
  return instance_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileEvent::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.ProfileEvent.instance_id)
}

// .google.protobuf.Timestamp start_time = 2;
inline bool ProfileEvent::has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& ProfileEvent::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.ProfileEvent.start_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ProfileEvent::release_start_time() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.ProfileEvent.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ProfileEvent::mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.ProfileEvent.start_time)
  return start_time_;
}
inline void ProfileEvent::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.ProfileEvent.start_time)
}

// .google.protobuf.Timestamp stop_time = 3;
inline bool ProfileEvent::has_stop_time() const {
  return this != internal_default_instance() && stop_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& ProfileEvent::stop_time() const {
  const ::google::protobuf::Timestamp* p = stop_time_;
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.ProfileEvent.stop_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ProfileEvent::release_stop_time() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.ProfileEvent.stop_time)
  
  ::google::protobuf::Timestamp* temp = stop_time_;
  stop_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ProfileEvent::mutable_stop_time() {
  
  if (stop_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    stop_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.ProfileEvent.stop_time)
  return stop_time_;
}
inline void ProfileEvent::set_allocated_stop_time(::google::protobuf::Timestamp* stop_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stop_time_);
  }
  if (stop_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(stop_time)->GetArena();
    if (message_arena != submessage_arena) {
      stop_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop_time, submessage_arena);
    }
    
  } else {
    
  }
  stop_time_ = stop_time;
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.ProfileEvent.stop_time)
}

// .muscle_manager_protocol.ProfileEventType event_type = 4;
inline void ProfileEvent::clear_event_type() {
  event_type_ = 0;
}
inline ::muscle_manager_protocol::ProfileEventType ProfileEvent::event_type() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.ProfileEvent.event_type)
  return static_cast< ::muscle_manager_protocol::ProfileEventType >(event_type_);
}
inline void ProfileEvent::set_event_type(::muscle_manager_protocol::ProfileEventType value) {
  
  event_type_ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.ProfileEvent.event_type)
}

// .muscle_manager_protocol.Port port = 5;
inline bool ProfileEvent::has_port() const {
  return this != internal_default_instance() && port_ != nullptr;
}
inline void ProfileEvent::clear_port() {
  if (GetArenaNoVirtual() == nullptr && port_ != nullptr) {
    delete port_;
  }
  port_ = nullptr;
}
inline const ::muscle_manager_protocol::Port& ProfileEvent::port() const {
  const ::muscle_manager_protocol::Port* p = port_;
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.ProfileEvent.port)
  return p != nullptr ? *p : *reinterpret_cast<const ::muscle_manager_protocol::Port*>(
      &::muscle_manager_protocol::_Port_default_instance_);
}
inline ::muscle_manager_protocol::Port* ProfileEvent::release_port() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.ProfileEvent.port)
  
  ::muscle_manager_protocol::Port* temp = port_;
  port_ = nullptr;
  return temp;
}
inline ::muscle_manager_protocol::Port* ProfileEvent::mutable_port() {
  
  if (port_ == nullptr) {
    auto* p = CreateMaybeMessage<::muscle_manager_protocol::Port>(GetArenaNoVirtual());
    port_ = p;
  }
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.ProfileEvent.port)
  return port_;
}
inline void ProfileEvent::set_allocated_port(::muscle_manager_protocol::Port* port) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete port_;
  }
  if (port) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      port = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, port, submessage_arena);
    }
    
  } else {
    
  }
  port_ = port;
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.ProfileEvent.port)
}

// int32 port_length = 6;
inline void ProfileEvent::clear_port_length() {
  port_length_ = 0;
}
inline ::google::protobuf::int32 ProfileEvent::port_length() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.ProfileEvent.port_length)
  return port_length_;
}
inline void ProfileEvent::set_port_length(::google::protobuf::int32 value) {
  
  port_length_ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.ProfileEvent.port_length)
}

// int32 slot = 7;
inline void ProfileEvent::clear_slot() {
  slot_ = 0;
}
inline ::google::protobuf::int32 ProfileEvent::slot() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.ProfileEvent.slot)
  return slot_;
}
inline void ProfileEvent::set_slot(::google::protobuf::int32 value) {
  
  slot_ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.ProfileEvent.slot)
}

// int64 message_size = 8;
inline void ProfileEvent::clear_message_size() {
  message_size_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ProfileEvent::message_size() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.ProfileEvent.message_size)
  return message_size_;
}
inline void ProfileEvent::set_message_size(::google::protobuf::int64 value) {
  
  message_size_ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.ProfileEvent.message_size)
}

// -------------------------------------------------------------------

// Profile

// repeated .muscle_manager_protocol.ProfileEvent events = 1;
inline int Profile::events_size() const {
  return events_.size();
}
inline void Profile::clear_events() {
  events_.Clear();
}
inline ::muscle_manager_protocol::ProfileEvent* Profile::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.Profile.events)
  return events_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::ProfileEvent >*
Profile::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:muscle_manager_protocol.Profile.events)
  return &events_;
}
inline const ::muscle_manager_protocol::ProfileEvent& Profile::events(int index) const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Profile.events)
  return events_.Get(index);
}
inline ::muscle_manager_protocol::ProfileEvent* Profile::add_events() {
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.Profile.events)
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::ProfileEvent >&
Profile::events() const {
  // @@protoc_insertion_point(field_list:muscle_manager_protocol.Profile.events)
  return events_;
}

// -------------------------------------------------------------------

// ProfileResult

// -------------------------------------------------------------------

// RegistrationRequest

// string instance_name = 1;
inline void RegistrationRequest::clear_instance_name() {
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistrationRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.RegistrationRequest.instance_name)
  return instance_name_.GetNoArena();
}
inline void RegistrationRequest::set_instance_name(const ::std::string& value) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.RegistrationRequest.instance_name)
}
#if LANG_CXX11
inline void RegistrationRequest::set_instance_name(::std::string&& value) {
  
  instance_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.RegistrationRequest.instance_name)
}
#endif
inline void RegistrationRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.RegistrationRequest.instance_name)
}
inline void RegistrationRequest::set_instance_name(const char* value, size_t size) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.RegistrationRequest.instance_name)
}
inline ::std::string* RegistrationRequest::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.RegistrationRequest.instance_name)
  return instance_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistrationRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.RegistrationRequest.instance_name)
  
  return instance_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistrationRequest::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.RegistrationRequest.instance_name)
}

// repeated string network_locations = 2;
inline int RegistrationRequest::network_locations_size() const {
  return network_locations_.size();
}
inline void RegistrationRequest::clear_network_locations() {
  network_locations_.Clear();
}
inline const ::std::string& RegistrationRequest::network_locations(int index) const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.RegistrationRequest.network_locations)
  return network_locations_.Get(index);
}
inline ::std::string* RegistrationRequest::mutable_network_locations(int index) {
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.RegistrationRequest.network_locations)
  return network_locations_.Mutable(index);
}
inline void RegistrationRequest::set_network_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.RegistrationRequest.network_locations)
  network_locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RegistrationRequest::set_network_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.RegistrationRequest.network_locations)
  network_locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RegistrationRequest::set_network_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  network_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.RegistrationRequest.network_locations)
}
inline void RegistrationRequest::set_network_locations(int index, const char* value, size_t size) {
  network_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.RegistrationRequest.network_locations)
}
inline ::std::string* RegistrationRequest::add_network_locations() {
  // @@protoc_insertion_point(field_add_mutable:muscle_manager_protocol.RegistrationRequest.network_locations)
  return network_locations_.Add();
}
inline void RegistrationRequest::add_network_locations(const ::std::string& value) {
  network_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.RegistrationRequest.network_locations)
}
#if LANG_CXX11
inline void RegistrationRequest::add_network_locations(::std::string&& value) {
  network_locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.RegistrationRequest.network_locations)
}
#endif
inline void RegistrationRequest::add_network_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  network_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:muscle_manager_protocol.RegistrationRequest.network_locations)
}
inline void RegistrationRequest::add_network_locations(const char* value, size_t size) {
  network_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:muscle_manager_protocol.RegistrationRequest.network_locations)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
RegistrationRequest::network_locations() const {
  // @@protoc_insertion_point(field_list:muscle_manager_protocol.RegistrationRequest.network_locations)
  return network_locations_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
RegistrationRequest::mutable_network_locations() {
  // @@protoc_insertion_point(field_mutable_list:muscle_manager_protocol.RegistrationRequest.network_locations)
  return &network_locations_;
}

// repeated .muscle_manager_protocol.Port ports = 3;
inline int RegistrationRequest::ports_size() const {
  return ports_.size();
}
inline void RegistrationRequest::clear_ports() {
  ports_.Clear();
}
inline ::muscle_manager_protocol::Port* RegistrationRequest::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.RegistrationRequest.ports)
  return ports_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Port >*
RegistrationRequest::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:muscle_manager_protocol.RegistrationRequest.ports)
  return &ports_;
}
inline const ::muscle_manager_protocol::Port& RegistrationRequest::ports(int index) const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.RegistrationRequest.ports)
  return ports_.Get(index);
}
inline ::muscle_manager_protocol::Port* RegistrationRequest::add_ports() {
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.RegistrationRequest.ports)
  return ports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Port >&
RegistrationRequest::ports() const {
  // @@protoc_insertion_point(field_list:muscle_manager_protocol.RegistrationRequest.ports)
  return ports_;
}

// -------------------------------------------------------------------

// RegistrationResult

// .muscle_manager_protocol.ResultStatus status = 1;
inline void RegistrationResult::clear_status() {
  status_ = 0;
}
inline ::muscle_manager_protocol::ResultStatus RegistrationResult::status() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.RegistrationResult.status)
  return static_cast< ::muscle_manager_protocol::ResultStatus >(status_);
}
inline void RegistrationResult::set_status(::muscle_manager_protocol::ResultStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.RegistrationResult.status)
}

// string error_message = 2;
inline void RegistrationResult::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistrationResult::error_message() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.RegistrationResult.error_message)
  return error_message_.GetNoArena();
}
inline void RegistrationResult::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.RegistrationResult.error_message)
}
#if LANG_CXX11
inline void RegistrationResult::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.RegistrationResult.error_message)
}
#endif
inline void RegistrationResult::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.RegistrationResult.error_message)
}
inline void RegistrationResult::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.RegistrationResult.error_message)
}
inline ::std::string* RegistrationResult::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.RegistrationResult.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistrationResult::release_error_message() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.RegistrationResult.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistrationResult::set_allocated_error_message(::std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.RegistrationResult.error_message)
}

// -------------------------------------------------------------------

// Conduit

// string sender = 1;
inline void Conduit::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Conduit::sender() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Conduit.sender)
  return sender_.GetNoArena();
}
inline void Conduit::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.Conduit.sender)
}
#if LANG_CXX11
inline void Conduit::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.Conduit.sender)
}
#endif
inline void Conduit::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.Conduit.sender)
}
inline void Conduit::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.Conduit.sender)
}
inline ::std::string* Conduit::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.Conduit.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Conduit::release_sender() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.Conduit.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Conduit::set_allocated_sender(::std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.Conduit.sender)
}

// string receiver = 2;
inline void Conduit::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Conduit::receiver() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Conduit.receiver)
  return receiver_.GetNoArena();
}
inline void Conduit::set_receiver(const ::std::string& value) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.Conduit.receiver)
}
#if LANG_CXX11
inline void Conduit::set_receiver(::std::string&& value) {
  
  receiver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.Conduit.receiver)
}
#endif
inline void Conduit::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.Conduit.receiver)
}
inline void Conduit::set_receiver(const char* value, size_t size) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.Conduit.receiver)
}
inline ::std::string* Conduit::mutable_receiver() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.Conduit.receiver)
  return receiver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Conduit::release_receiver() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.Conduit.receiver)
  
  return receiver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Conduit::set_allocated_receiver(::std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.Conduit.receiver)
}

// -------------------------------------------------------------------

// PeerRequest

// string instance_name = 1;
inline void PeerRequest::clear_instance_name() {
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.PeerRequest.instance_name)
  return instance_name_.GetNoArena();
}
inline void PeerRequest::set_instance_name(const ::std::string& value) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.PeerRequest.instance_name)
}
#if LANG_CXX11
inline void PeerRequest::set_instance_name(::std::string&& value) {
  
  instance_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.PeerRequest.instance_name)
}
#endif
inline void PeerRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.PeerRequest.instance_name)
}
inline void PeerRequest::set_instance_name(const char* value, size_t size) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.PeerRequest.instance_name)
}
inline ::std::string* PeerRequest::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.PeerRequest.instance_name)
  return instance_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.PeerRequest.instance_name)
  
  return instance_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerRequest::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.PeerRequest.instance_name)
}

// -------------------------------------------------------------------

// PeerResult_PeerDimensions

// string peer_name = 1;
inline void PeerResult_PeerDimensions::clear_peer_name() {
  peer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerResult_PeerDimensions::peer_name() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.PeerResult.PeerDimensions.peer_name)
  return peer_name_.GetNoArena();
}
inline void PeerResult_PeerDimensions::set_peer_name(const ::std::string& value) {
  
  peer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.PeerResult.PeerDimensions.peer_name)
}
#if LANG_CXX11
inline void PeerResult_PeerDimensions::set_peer_name(::std::string&& value) {
  
  peer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.PeerResult.PeerDimensions.peer_name)
}
#endif
inline void PeerResult_PeerDimensions::set_peer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.PeerResult.PeerDimensions.peer_name)
}
inline void PeerResult_PeerDimensions::set_peer_name(const char* value, size_t size) {
  
  peer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.PeerResult.PeerDimensions.peer_name)
}
inline ::std::string* PeerResult_PeerDimensions::mutable_peer_name() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.PeerResult.PeerDimensions.peer_name)
  return peer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerResult_PeerDimensions::release_peer_name() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.PeerResult.PeerDimensions.peer_name)
  
  return peer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerResult_PeerDimensions::set_allocated_peer_name(::std::string* peer_name) {
  if (peer_name != nullptr) {
    
  } else {
    
  }
  peer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_name);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.PeerResult.PeerDimensions.peer_name)
}

// repeated int32 dimensions = 2;
inline int PeerResult_PeerDimensions::dimensions_size() const {
  return dimensions_.size();
}
inline void PeerResult_PeerDimensions::clear_dimensions() {
  dimensions_.Clear();
}
inline ::google::protobuf::int32 PeerResult_PeerDimensions::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.PeerResult.PeerDimensions.dimensions)
  return dimensions_.Get(index);
}
inline void PeerResult_PeerDimensions::set_dimensions(int index, ::google::protobuf::int32 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.PeerResult.PeerDimensions.dimensions)
}
inline void PeerResult_PeerDimensions::add_dimensions(::google::protobuf::int32 value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.PeerResult.PeerDimensions.dimensions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PeerResult_PeerDimensions::dimensions() const {
  // @@protoc_insertion_point(field_list:muscle_manager_protocol.PeerResult.PeerDimensions.dimensions)
  return dimensions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PeerResult_PeerDimensions::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:muscle_manager_protocol.PeerResult.PeerDimensions.dimensions)
  return &dimensions_;
}

// -------------------------------------------------------------------

// PeerResult_PeerLocations

// string instance_name = 1;
inline void PeerResult_PeerLocations::clear_instance_name() {
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerResult_PeerLocations::instance_name() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.PeerResult.PeerLocations.instance_name)
  return instance_name_.GetNoArena();
}
inline void PeerResult_PeerLocations::set_instance_name(const ::std::string& value) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.PeerResult.PeerLocations.instance_name)
}
#if LANG_CXX11
inline void PeerResult_PeerLocations::set_instance_name(::std::string&& value) {
  
  instance_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.PeerResult.PeerLocations.instance_name)
}
#endif
inline void PeerResult_PeerLocations::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.PeerResult.PeerLocations.instance_name)
}
inline void PeerResult_PeerLocations::set_instance_name(const char* value, size_t size) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.PeerResult.PeerLocations.instance_name)
}
inline ::std::string* PeerResult_PeerLocations::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.PeerResult.PeerLocations.instance_name)
  return instance_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerResult_PeerLocations::release_instance_name() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.PeerResult.PeerLocations.instance_name)
  
  return instance_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerResult_PeerLocations::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.PeerResult.PeerLocations.instance_name)
}

// repeated string locations = 2;
inline int PeerResult_PeerLocations::locations_size() const {
  return locations_.size();
}
inline void PeerResult_PeerLocations::clear_locations() {
  locations_.Clear();
}
inline const ::std::string& PeerResult_PeerLocations::locations(int index) const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.PeerResult.PeerLocations.locations)
  return locations_.Get(index);
}
inline ::std::string* PeerResult_PeerLocations::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.PeerResult.PeerLocations.locations)
  return locations_.Mutable(index);
}
inline void PeerResult_PeerLocations::set_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.PeerResult.PeerLocations.locations)
  locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PeerResult_PeerLocations::set_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.PeerResult.PeerLocations.locations)
  locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PeerResult_PeerLocations::set_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.PeerResult.PeerLocations.locations)
}
inline void PeerResult_PeerLocations::set_locations(int index, const char* value, size_t size) {
  locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.PeerResult.PeerLocations.locations)
}
inline ::std::string* PeerResult_PeerLocations::add_locations() {
  // @@protoc_insertion_point(field_add_mutable:muscle_manager_protocol.PeerResult.PeerLocations.locations)
  return locations_.Add();
}
inline void PeerResult_PeerLocations::add_locations(const ::std::string& value) {
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.PeerResult.PeerLocations.locations)
}
#if LANG_CXX11
inline void PeerResult_PeerLocations::add_locations(::std::string&& value) {
  locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.PeerResult.PeerLocations.locations)
}
#endif
inline void PeerResult_PeerLocations::add_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:muscle_manager_protocol.PeerResult.PeerLocations.locations)
}
inline void PeerResult_PeerLocations::add_locations(const char* value, size_t size) {
  locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:muscle_manager_protocol.PeerResult.PeerLocations.locations)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
PeerResult_PeerLocations::locations() const {
  // @@protoc_insertion_point(field_list:muscle_manager_protocol.PeerResult.PeerLocations.locations)
  return locations_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
PeerResult_PeerLocations::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:muscle_manager_protocol.PeerResult.PeerLocations.locations)
  return &locations_;
}

// -------------------------------------------------------------------

// PeerResult

// .muscle_manager_protocol.ResultStatus status = 1;
inline void PeerResult::clear_status() {
  status_ = 0;
}
inline ::muscle_manager_protocol::ResultStatus PeerResult::status() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.PeerResult.status)
  return static_cast< ::muscle_manager_protocol::ResultStatus >(status_);
}
inline void PeerResult::set_status(::muscle_manager_protocol::ResultStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.PeerResult.status)
}

// string error_message = 2;
inline void PeerResult::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerResult::error_message() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.PeerResult.error_message)
  return error_message_.GetNoArena();
}
inline void PeerResult::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.PeerResult.error_message)
}
#if LANG_CXX11
inline void PeerResult::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.PeerResult.error_message)
}
#endif
inline void PeerResult::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.PeerResult.error_message)
}
inline void PeerResult::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.PeerResult.error_message)
}
inline ::std::string* PeerResult::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.PeerResult.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerResult::release_error_message() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.PeerResult.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerResult::set_allocated_error_message(::std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.PeerResult.error_message)
}

// repeated .muscle_manager_protocol.Conduit conduits = 3;
inline int PeerResult::conduits_size() const {
  return conduits_.size();
}
inline void PeerResult::clear_conduits() {
  conduits_.Clear();
}
inline ::muscle_manager_protocol::Conduit* PeerResult::mutable_conduits(int index) {
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.PeerResult.conduits)
  return conduits_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Conduit >*
PeerResult::mutable_conduits() {
  // @@protoc_insertion_point(field_mutable_list:muscle_manager_protocol.PeerResult.conduits)
  return &conduits_;
}
inline const ::muscle_manager_protocol::Conduit& PeerResult::conduits(int index) const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.PeerResult.conduits)
  return conduits_.Get(index);
}
inline ::muscle_manager_protocol::Conduit* PeerResult::add_conduits() {
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.PeerResult.conduits)
  return conduits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Conduit >&
PeerResult::conduits() const {
  // @@protoc_insertion_point(field_list:muscle_manager_protocol.PeerResult.conduits)
  return conduits_;
}

// repeated .muscle_manager_protocol.PeerResult.PeerDimensions peer_dimensions = 4;
inline int PeerResult::peer_dimensions_size() const {
  return peer_dimensions_.size();
}
inline void PeerResult::clear_peer_dimensions() {
  peer_dimensions_.Clear();
}
inline ::muscle_manager_protocol::PeerResult_PeerDimensions* PeerResult::mutable_peer_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.PeerResult.peer_dimensions)
  return peer_dimensions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::PeerResult_PeerDimensions >*
PeerResult::mutable_peer_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:muscle_manager_protocol.PeerResult.peer_dimensions)
  return &peer_dimensions_;
}
inline const ::muscle_manager_protocol::PeerResult_PeerDimensions& PeerResult::peer_dimensions(int index) const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.PeerResult.peer_dimensions)
  return peer_dimensions_.Get(index);
}
inline ::muscle_manager_protocol::PeerResult_PeerDimensions* PeerResult::add_peer_dimensions() {
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.PeerResult.peer_dimensions)
  return peer_dimensions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::PeerResult_PeerDimensions >&
PeerResult::peer_dimensions() const {
  // @@protoc_insertion_point(field_list:muscle_manager_protocol.PeerResult.peer_dimensions)
  return peer_dimensions_;
}

// repeated .muscle_manager_protocol.PeerResult.PeerLocations peer_locations = 5;
inline int PeerResult::peer_locations_size() const {
  return peer_locations_.size();
}
inline void PeerResult::clear_peer_locations() {
  peer_locations_.Clear();
}
inline ::muscle_manager_protocol::PeerResult_PeerLocations* PeerResult::mutable_peer_locations(int index) {
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.PeerResult.peer_locations)
  return peer_locations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::PeerResult_PeerLocations >*
PeerResult::mutable_peer_locations() {
  // @@protoc_insertion_point(field_mutable_list:muscle_manager_protocol.PeerResult.peer_locations)
  return &peer_locations_;
}
inline const ::muscle_manager_protocol::PeerResult_PeerLocations& PeerResult::peer_locations(int index) const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.PeerResult.peer_locations)
  return peer_locations_.Get(index);
}
inline ::muscle_manager_protocol::PeerResult_PeerLocations* PeerResult::add_peer_locations() {
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.PeerResult.peer_locations)
  return peer_locations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::PeerResult_PeerLocations >&
PeerResult::peer_locations() const {
  // @@protoc_insertion_point(field_list:muscle_manager_protocol.PeerResult.peer_locations)
  return peer_locations_;
}

// -------------------------------------------------------------------

// ListOfDouble

// repeated double values = 1;
inline int ListOfDouble::values_size() const {
  return values_.size();
}
inline void ListOfDouble::clear_values() {
  values_.Clear();
}
inline double ListOfDouble::values(int index) const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.ListOfDouble.values)
  return values_.Get(index);
}
inline void ListOfDouble::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.ListOfDouble.values)
}
inline void ListOfDouble::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.ListOfDouble.values)
}
inline const ::google::protobuf::RepeatedField< double >&
ListOfDouble::values() const {
  // @@protoc_insertion_point(field_list:muscle_manager_protocol.ListOfDouble.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
ListOfDouble::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:muscle_manager_protocol.ListOfDouble.values)
  return &values_;
}

// -------------------------------------------------------------------

// ListOfListOfDouble

// repeated .muscle_manager_protocol.ListOfDouble values = 1;
inline int ListOfListOfDouble::values_size() const {
  return values_.size();
}
inline void ListOfListOfDouble::clear_values() {
  values_.Clear();
}
inline ::muscle_manager_protocol::ListOfDouble* ListOfListOfDouble::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.ListOfListOfDouble.values)
  return values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::ListOfDouble >*
ListOfListOfDouble::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:muscle_manager_protocol.ListOfListOfDouble.values)
  return &values_;
}
inline const ::muscle_manager_protocol::ListOfDouble& ListOfListOfDouble::values(int index) const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.ListOfListOfDouble.values)
  return values_.Get(index);
}
inline ::muscle_manager_protocol::ListOfDouble* ListOfListOfDouble::add_values() {
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.ListOfListOfDouble.values)
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::ListOfDouble >&
ListOfListOfDouble::values() const {
  // @@protoc_insertion_point(field_list:muscle_manager_protocol.ListOfListOfDouble.values)
  return values_;
}

// -------------------------------------------------------------------

// Setting

// string name = 1;
inline void Setting::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Setting::name() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Setting.name)
  return name_.GetNoArena();
}
inline void Setting::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.Setting.name)
}
#if LANG_CXX11
inline void Setting::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.Setting.name)
}
#endif
inline void Setting::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.Setting.name)
}
inline void Setting::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.Setting.name)
}
inline ::std::string* Setting::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.Setting.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Setting::release_name() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.Setting.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.Setting.name)
}

// .muscle_manager_protocol.SettingValueType value_type = 2;
inline void Setting::clear_value_type() {
  value_type_ = 0;
}
inline ::muscle_manager_protocol::SettingValueType Setting::value_type() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Setting.value_type)
  return static_cast< ::muscle_manager_protocol::SettingValueType >(value_type_);
}
inline void Setting::set_value_type(::muscle_manager_protocol::SettingValueType value) {
  
  value_type_ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.Setting.value_type)
}

// string value_string = 3;
inline void Setting::clear_value_string() {
  value_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Setting::value_string() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Setting.value_string)
  return value_string_.GetNoArena();
}
inline void Setting::set_value_string(const ::std::string& value) {
  
  value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.Setting.value_string)
}
#if LANG_CXX11
inline void Setting::set_value_string(::std::string&& value) {
  
  value_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.Setting.value_string)
}
#endif
inline void Setting::set_value_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.Setting.value_string)
}
inline void Setting::set_value_string(const char* value, size_t size) {
  
  value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.Setting.value_string)
}
inline ::std::string* Setting::mutable_value_string() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.Setting.value_string)
  return value_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Setting::release_value_string() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.Setting.value_string)
  
  return value_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_value_string(::std::string* value_string) {
  if (value_string != nullptr) {
    
  } else {
    
  }
  value_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_string);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.Setting.value_string)
}

// int64 value_int = 4;
inline void Setting::clear_value_int() {
  value_int_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Setting::value_int() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Setting.value_int)
  return value_int_;
}
inline void Setting::set_value_int(::google::protobuf::int64 value) {
  
  value_int_ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.Setting.value_int)
}

// double value_float = 5;
inline void Setting::clear_value_float() {
  value_float_ = 0;
}
inline double Setting::value_float() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Setting.value_float)
  return value_float_;
}
inline void Setting::set_value_float(double value) {
  
  value_float_ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.Setting.value_float)
}

// bool value_bool = 6;
inline void Setting::clear_value_bool() {
  value_bool_ = false;
}
inline bool Setting::value_bool() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Setting.value_bool)
  return value_bool_;
}
inline void Setting::set_value_bool(bool value) {
  
  value_bool_ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.Setting.value_bool)
}

// .muscle_manager_protocol.ListOfDouble value_list_float = 7;
inline bool Setting::has_value_list_float() const {
  return this != internal_default_instance() && value_list_float_ != nullptr;
}
inline void Setting::clear_value_list_float() {
  if (GetArenaNoVirtual() == nullptr && value_list_float_ != nullptr) {
    delete value_list_float_;
  }
  value_list_float_ = nullptr;
}
inline const ::muscle_manager_protocol::ListOfDouble& Setting::value_list_float() const {
  const ::muscle_manager_protocol::ListOfDouble* p = value_list_float_;
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Setting.value_list_float)
  return p != nullptr ? *p : *reinterpret_cast<const ::muscle_manager_protocol::ListOfDouble*>(
      &::muscle_manager_protocol::_ListOfDouble_default_instance_);
}
inline ::muscle_manager_protocol::ListOfDouble* Setting::release_value_list_float() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.Setting.value_list_float)
  
  ::muscle_manager_protocol::ListOfDouble* temp = value_list_float_;
  value_list_float_ = nullptr;
  return temp;
}
inline ::muscle_manager_protocol::ListOfDouble* Setting::mutable_value_list_float() {
  
  if (value_list_float_ == nullptr) {
    auto* p = CreateMaybeMessage<::muscle_manager_protocol::ListOfDouble>(GetArenaNoVirtual());
    value_list_float_ = p;
  }
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.Setting.value_list_float)
  return value_list_float_;
}
inline void Setting::set_allocated_value_list_float(::muscle_manager_protocol::ListOfDouble* value_list_float) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_list_float_;
  }
  if (value_list_float) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value_list_float = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_list_float, submessage_arena);
    }
    
  } else {
    
  }
  value_list_float_ = value_list_float;
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.Setting.value_list_float)
}

// .muscle_manager_protocol.ListOfListOfDouble value_list_list_float = 8;
inline bool Setting::has_value_list_list_float() const {
  return this != internal_default_instance() && value_list_list_float_ != nullptr;
}
inline void Setting::clear_value_list_list_float() {
  if (GetArenaNoVirtual() == nullptr && value_list_list_float_ != nullptr) {
    delete value_list_list_float_;
  }
  value_list_list_float_ = nullptr;
}
inline const ::muscle_manager_protocol::ListOfListOfDouble& Setting::value_list_list_float() const {
  const ::muscle_manager_protocol::ListOfListOfDouble* p = value_list_list_float_;
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.Setting.value_list_list_float)
  return p != nullptr ? *p : *reinterpret_cast<const ::muscle_manager_protocol::ListOfListOfDouble*>(
      &::muscle_manager_protocol::_ListOfListOfDouble_default_instance_);
}
inline ::muscle_manager_protocol::ListOfListOfDouble* Setting::release_value_list_list_float() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.Setting.value_list_list_float)
  
  ::muscle_manager_protocol::ListOfListOfDouble* temp = value_list_list_float_;
  value_list_list_float_ = nullptr;
  return temp;
}
inline ::muscle_manager_protocol::ListOfListOfDouble* Setting::mutable_value_list_list_float() {
  
  if (value_list_list_float_ == nullptr) {
    auto* p = CreateMaybeMessage<::muscle_manager_protocol::ListOfListOfDouble>(GetArenaNoVirtual());
    value_list_list_float_ = p;
  }
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.Setting.value_list_list_float)
  return value_list_list_float_;
}
inline void Setting::set_allocated_value_list_list_float(::muscle_manager_protocol::ListOfListOfDouble* value_list_list_float) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_list_list_float_;
  }
  if (value_list_list_float) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value_list_list_float = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_list_list_float, submessage_arena);
    }
    
  } else {
    
  }
  value_list_list_float_ = value_list_list_float;
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.Setting.value_list_list_float)
}

// -------------------------------------------------------------------

// SettingsRequest

// -------------------------------------------------------------------

// SettingsResult

// repeated .muscle_manager_protocol.Setting setting_values = 1;
inline int SettingsResult::setting_values_size() const {
  return setting_values_.size();
}
inline void SettingsResult::clear_setting_values() {
  setting_values_.Clear();
}
inline ::muscle_manager_protocol::Setting* SettingsResult::mutable_setting_values(int index) {
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.SettingsResult.setting_values)
  return setting_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Setting >*
SettingsResult::mutable_setting_values() {
  // @@protoc_insertion_point(field_mutable_list:muscle_manager_protocol.SettingsResult.setting_values)
  return &setting_values_;
}
inline const ::muscle_manager_protocol::Setting& SettingsResult::setting_values(int index) const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.SettingsResult.setting_values)
  return setting_values_.Get(index);
}
inline ::muscle_manager_protocol::Setting* SettingsResult::add_setting_values() {
  // @@protoc_insertion_point(field_add:muscle_manager_protocol.SettingsResult.setting_values)
  return setting_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::muscle_manager_protocol::Setting >&
SettingsResult::setting_values() const {
  // @@protoc_insertion_point(field_list:muscle_manager_protocol.SettingsResult.setting_values)
  return setting_values_;
}

// -------------------------------------------------------------------

// DeregistrationRequest

// string instance_name = 1;
inline void DeregistrationRequest::clear_instance_name() {
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeregistrationRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.DeregistrationRequest.instance_name)
  return instance_name_.GetNoArena();
}
inline void DeregistrationRequest::set_instance_name(const ::std::string& value) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.DeregistrationRequest.instance_name)
}
#if LANG_CXX11
inline void DeregistrationRequest::set_instance_name(::std::string&& value) {
  
  instance_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.DeregistrationRequest.instance_name)
}
#endif
inline void DeregistrationRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.DeregistrationRequest.instance_name)
}
inline void DeregistrationRequest::set_instance_name(const char* value, size_t size) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.DeregistrationRequest.instance_name)
}
inline ::std::string* DeregistrationRequest::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.DeregistrationRequest.instance_name)
  return instance_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeregistrationRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.DeregistrationRequest.instance_name)
  
  return instance_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeregistrationRequest::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.DeregistrationRequest.instance_name)
}

// -------------------------------------------------------------------

// DeregistrationResult

// .muscle_manager_protocol.ResultStatus status = 1;
inline void DeregistrationResult::clear_status() {
  status_ = 0;
}
inline ::muscle_manager_protocol::ResultStatus DeregistrationResult::status() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.DeregistrationResult.status)
  return static_cast< ::muscle_manager_protocol::ResultStatus >(status_);
}
inline void DeregistrationResult::set_status(::muscle_manager_protocol::ResultStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.DeregistrationResult.status)
}

// string error_message = 2;
inline void DeregistrationResult::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeregistrationResult::error_message() const {
  // @@protoc_insertion_point(field_get:muscle_manager_protocol.DeregistrationResult.error_message)
  return error_message_.GetNoArena();
}
inline void DeregistrationResult::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:muscle_manager_protocol.DeregistrationResult.error_message)
}
#if LANG_CXX11
inline void DeregistrationResult::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:muscle_manager_protocol.DeregistrationResult.error_message)
}
#endif
inline void DeregistrationResult::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:muscle_manager_protocol.DeregistrationResult.error_message)
}
inline void DeregistrationResult::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:muscle_manager_protocol.DeregistrationResult.error_message)
}
inline ::std::string* DeregistrationResult::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:muscle_manager_protocol.DeregistrationResult.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeregistrationResult::release_error_message() {
  // @@protoc_insertion_point(field_release:muscle_manager_protocol.DeregistrationResult.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeregistrationResult::set_allocated_error_message(::std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:muscle_manager_protocol.DeregistrationResult.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace muscle_manager_protocol

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::muscle_manager_protocol::ResultStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::muscle_manager_protocol::ResultStatus>() {
  return ::muscle_manager_protocol::ResultStatus_descriptor();
}
template <> struct is_proto_enum< ::muscle_manager_protocol::Operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::muscle_manager_protocol::Operator>() {
  return ::muscle_manager_protocol::Operator_descriptor();
}
template <> struct is_proto_enum< ::muscle_manager_protocol::LogLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::muscle_manager_protocol::LogLevel>() {
  return ::muscle_manager_protocol::LogLevel_descriptor();
}
template <> struct is_proto_enum< ::muscle_manager_protocol::ProfileEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::muscle_manager_protocol::ProfileEventType>() {
  return ::muscle_manager_protocol::ProfileEventType_descriptor();
}
template <> struct is_proto_enum< ::muscle_manager_protocol::SettingValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::muscle_manager_protocol::SettingValueType>() {
  return ::muscle_manager_protocol::SettingValueType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto
