// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: muscle_manager_protocol/muscle_manager_protocol.proto

#include "muscle_manager_protocol/muscle_manager_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
namespace muscle_manager_protocol {
class LogMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogMessage> _instance;
} _LogMessage_default_instance_;
class LogResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogResult> _instance;
} _LogResult_default_instance_;
class PortDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Port> _instance;
} _Port_default_instance_;
class ProfileEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProfileEvent> _instance;
} _ProfileEvent_default_instance_;
class ProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Profile> _instance;
} _Profile_default_instance_;
class ProfileResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProfileResult> _instance;
} _ProfileResult_default_instance_;
class RegistrationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegistrationRequest> _instance;
} _RegistrationRequest_default_instance_;
class RegistrationResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegistrationResult> _instance;
} _RegistrationResult_default_instance_;
class ConduitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Conduit> _instance;
} _Conduit_default_instance_;
class PeerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerRequest> _instance;
} _PeerRequest_default_instance_;
class PeerResult_PeerDimensionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerResult_PeerDimensions> _instance;
} _PeerResult_PeerDimensions_default_instance_;
class PeerResult_PeerLocationsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerResult_PeerLocations> _instance;
} _PeerResult_PeerLocations_default_instance_;
class PeerResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerResult> _instance;
} _PeerResult_default_instance_;
class ListOfDoubleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListOfDouble> _instance;
} _ListOfDouble_default_instance_;
class ListOfListOfDoubleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListOfListOfDouble> _instance;
} _ListOfListOfDouble_default_instance_;
class SettingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Setting> _instance;
} _Setting_default_instance_;
class SettingsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettingsRequest> _instance;
} _SettingsRequest_default_instance_;
class SettingsResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettingsResult> _instance;
} _SettingsResult_default_instance_;
class DeregistrationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeregistrationRequest> _instance;
} _DeregistrationRequest_default_instance_;
class DeregistrationResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeregistrationResult> _instance;
} _DeregistrationResult_default_instance_;
}  // namespace muscle_manager_protocol
static void InitDefaultsLogMessage_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_LogMessage_default_instance_;
    new (ptr) ::muscle_manager_protocol::LogMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::LogMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LogMessage_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLogMessage_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsLogResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_LogResult_default_instance_;
    new (ptr) ::muscle_manager_protocol::LogResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::LogResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsPort_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_Port_default_instance_;
    new (ptr) ::muscle_manager_protocol::Port();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::Port::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPort_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_ProfileEvent_default_instance_;
    new (ptr) ::muscle_manager_protocol::ProfileEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::ProfileEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsProfile_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_Profile_default_instance_;
    new (ptr) ::muscle_manager_protocol::Profile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::Profile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Profile_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProfile_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsProfileResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_ProfileResult_default_instance_;
    new (ptr) ::muscle_manager_protocol::ProfileResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::ProfileResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProfileResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProfileResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsRegistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_RegistrationRequest_default_instance_;
    new (ptr) ::muscle_manager_protocol::RegistrationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::RegistrationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsRegistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_RegistrationResult_default_instance_;
    new (ptr) ::muscle_manager_protocol::RegistrationResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::RegistrationResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsConduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_Conduit_default_instance_;
    new (ptr) ::muscle_manager_protocol::Conduit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::Conduit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsPeerRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_PeerRequest_default_instance_;
    new (ptr) ::muscle_manager_protocol::PeerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::PeerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsPeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_PeerResult_PeerDimensions_default_instance_;
    new (ptr) ::muscle_manager_protocol::PeerResult_PeerDimensions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::PeerResult_PeerDimensions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsPeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_PeerResult_PeerLocations_default_instance_;
    new (ptr) ::muscle_manager_protocol::PeerResult_PeerLocations();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::PeerResult_PeerLocations::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsPeerResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_PeerResult_default_instance_;
    new (ptr) ::muscle_manager_protocol::PeerResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::PeerResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PeerResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPeerResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
      &scc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
      &scc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_ListOfDouble_default_instance_;
    new (ptr) ::muscle_manager_protocol::ListOfDouble();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::ListOfDouble::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_ListOfListOfDouble_default_instance_;
    new (ptr) ::muscle_manager_protocol::ListOfListOfDouble();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::ListOfListOfDouble::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsSetting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_Setting_default_instance_;
    new (ptr) ::muscle_manager_protocol::Setting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::Setting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSetting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
      &scc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsSettingsRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_SettingsRequest_default_instance_;
    new (ptr) ::muscle_manager_protocol::SettingsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::SettingsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SettingsRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSettingsRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsSettingsResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_SettingsResult_default_instance_;
    new (ptr) ::muscle_manager_protocol::SettingsResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::SettingsResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SettingsResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSettingsResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsDeregistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_DeregistrationRequest_default_instance_;
    new (ptr) ::muscle_manager_protocol::DeregistrationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::DeregistrationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeregistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeregistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsDeregistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_DeregistrationResult_default_instance_;
    new (ptr) ::muscle_manager_protocol::DeregistrationResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::DeregistrationResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeregistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeregistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

void InitDefaults_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LogMessage_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Profile_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProfileResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettingsRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettingsResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeregistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeregistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[20];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[5];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::LogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::LogMessage, instance_id_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::LogMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::LogMessage, level_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::LogMessage, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::LogResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Port, name_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Port, operator__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, instance_id_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, start_time_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, stop_time_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, event_type_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, port_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, port_length_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, slot_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, message_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Profile, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationRequest, instance_name_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationRequest, network_locations_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationRequest, ports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationResult, status_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationResult, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Conduit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Conduit, sender_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Conduit, receiver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerRequest, instance_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult_PeerDimensions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult_PeerDimensions, peer_name_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult_PeerDimensions, dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult_PeerLocations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult_PeerLocations, instance_name_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult_PeerLocations, locations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult, status_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult, error_message_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult, conduits_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult, peer_dimensions_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult, peer_locations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ListOfDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ListOfDouble, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ListOfListOfDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ListOfListOfDouble, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, name_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_type_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_string_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_int_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_float_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_bool_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_list_float_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_list_list_float_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::SettingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::SettingsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::SettingsResult, setting_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::DeregistrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::DeregistrationRequest, instance_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::DeregistrationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::DeregistrationResult, status_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::DeregistrationResult, error_message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::muscle_manager_protocol::LogMessage)},
  { 9, -1, sizeof(::muscle_manager_protocol::LogResult)},
  { 14, -1, sizeof(::muscle_manager_protocol::Port)},
  { 21, -1, sizeof(::muscle_manager_protocol::ProfileEvent)},
  { 34, -1, sizeof(::muscle_manager_protocol::Profile)},
  { 40, -1, sizeof(::muscle_manager_protocol::ProfileResult)},
  { 45, -1, sizeof(::muscle_manager_protocol::RegistrationRequest)},
  { 53, -1, sizeof(::muscle_manager_protocol::RegistrationResult)},
  { 60, -1, sizeof(::muscle_manager_protocol::Conduit)},
  { 67, -1, sizeof(::muscle_manager_protocol::PeerRequest)},
  { 73, -1, sizeof(::muscle_manager_protocol::PeerResult_PeerDimensions)},
  { 80, -1, sizeof(::muscle_manager_protocol::PeerResult_PeerLocations)},
  { 87, -1, sizeof(::muscle_manager_protocol::PeerResult)},
  { 97, -1, sizeof(::muscle_manager_protocol::ListOfDouble)},
  { 103, -1, sizeof(::muscle_manager_protocol::ListOfListOfDouble)},
  { 109, -1, sizeof(::muscle_manager_protocol::Setting)},
  { 122, -1, sizeof(::muscle_manager_protocol::SettingsRequest)},
  { 127, -1, sizeof(::muscle_manager_protocol::SettingsResult)},
  { 133, -1, sizeof(::muscle_manager_protocol::DeregistrationRequest)},
  { 139, -1, sizeof(::muscle_manager_protocol::DeregistrationResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_LogMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_LogResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_Port_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_ProfileEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_Profile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_ProfileResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_RegistrationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_RegistrationResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_Conduit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_PeerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_PeerResult_PeerDimensions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_PeerResult_PeerLocations_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_PeerResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_ListOfDouble_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_ListOfListOfDouble_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_Setting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_SettingsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_SettingsResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_DeregistrationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muscle_manager_protocol::_DeregistrationResult_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto = {
  {}, AddDescriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto, "muscle_manager_protocol/muscle_manager_protocol.proto", schemas,
  file_default_instances, TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto::offsets,
  file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto, 20, file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto, file_level_service_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto,
};

const char descriptor_table_protodef_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[] =
  "\n5muscle_manager_protocol/muscle_manager"
  "_protocol.proto\022\027muscle_manager_protocol"
  "\032\037google/protobuf/timestamp.proto\"\220\001\n\nLo"
  "gMessage\022\023\n\013instance_id\030\001 \001(\t\022-\n\ttimesta"
  "mp\030\003 \001(\0132\032.google.protobuf.Timestamp\0220\n\005"
  "level\030\004 \001(\0162!.muscle_manager_protocol.Lo"
  "gLevel\022\014\n\004text\030\005 \001(\t\"\013\n\tLogResult\"I\n\004Por"
  "t\022\014\n\004name\030\001 \001(\t\0223\n\010operator\030\002 \001(\0162!.musc"
  "le_manager_protocol.Operator\"\247\002\n\014Profile"
  "Event\022\023\n\013instance_id\030\001 \001(\t\022.\n\nstart_time"
  "\030\002 \001(\0132\032.google.protobuf.Timestamp\022-\n\tst"
  "op_time\030\003 \001(\0132\032.google.protobuf.Timestam"
  "p\022=\n\nevent_type\030\004 \001(\0162).muscle_manager_p"
  "rotocol.ProfileEventType\022+\n\004port\030\005 \001(\0132\035"
  ".muscle_manager_protocol.Port\022\023\n\013port_le"
  "ngth\030\006 \001(\005\022\014\n\004slot\030\007 \001(\005\022\024\n\014message_size"
  "\030\010 \001(\003\"@\n\007Profile\0225\n\006events\030\001 \003(\0132%.musc"
  "le_manager_protocol.ProfileEvent\"\017\n\rProf"
  "ileResult\"u\n\023RegistrationRequest\022\025\n\rinst"
  "ance_name\030\001 \001(\t\022\031\n\021network_locations\030\002 \003"
  "(\t\022,\n\005ports\030\003 \003(\0132\035.muscle_manager_proto"
  "col.Port\"b\n\022RegistrationResult\0225\n\006status"
  "\030\001 \001(\0162%.muscle_manager_protocol.ResultS"
  "tatus\022\025\n\rerror_message\030\002 \001(\t\"+\n\007Conduit\022"
  "\016\n\006sender\030\001 \001(\t\022\020\n\010receiver\030\002 \001(\t\"$\n\013Pee"
  "rRequest\022\025\n\rinstance_name\030\001 \001(\t\"\232\003\n\nPeer"
  "Result\0225\n\006status\030\001 \001(\0162%.muscle_manager_"
  "protocol.ResultStatus\022\025\n\rerror_message\030\002"
  " \001(\t\0222\n\010conduits\030\003 \003(\0132 .muscle_manager_"
  "protocol.Conduit\022K\n\017peer_dimensions\030\004 \003("
  "\01322.muscle_manager_protocol.PeerResult.P"
  "eerDimensions\022I\n\016peer_locations\030\005 \003(\01321."
  "muscle_manager_protocol.PeerResult.PeerL"
  "ocations\0327\n\016PeerDimensions\022\021\n\tpeer_name\030"
  "\001 \001(\t\022\022\n\ndimensions\030\002 \003(\005\0329\n\rPeerLocatio"
  "ns\022\025\n\rinstance_name\030\001 \001(\t\022\021\n\tlocations\030\002"
  " \003(\t\"\036\n\014ListOfDouble\022\016\n\006values\030\001 \003(\001\"K\n\022"
  "ListOfListOfDouble\0225\n\006values\030\001 \003(\0132%.mus"
  "cle_manager_protocol.ListOfDouble\"\265\002\n\007Se"
  "tting\022\014\n\004name\030\001 \001(\t\022=\n\nvalue_type\030\002 \001(\0162"
  ").muscle_manager_protocol.SettingValueTy"
  "pe\022\024\n\014value_string\030\003 \001(\t\022\021\n\tvalue_int\030\004 "
  "\001(\003\022\023\n\013value_float\030\005 \001(\001\022\022\n\nvalue_bool\030\006"
  " \001(\010\022\?\n\020value_list_float\030\007 \001(\0132%.muscle_"
  "manager_protocol.ListOfDouble\022J\n\025value_l"
  "ist_list_float\030\010 \001(\0132+.muscle_manager_pr"
  "otocol.ListOfListOfDouble\"\021\n\017SettingsReq"
  "uest\"J\n\016SettingsResult\0228\n\016setting_values"
  "\030\001 \003(\0132 .muscle_manager_protocol.Setting"
  "\".\n\025DeregistrationRequest\022\025\n\rinstance_na"
  "me\030\001 \001(\t\"d\n\024DeregistrationResult\0225\n\006stat"
  "us\030\001 \001(\0162%.muscle_manager_protocol.Resul"
  "tStatus\022\025\n\rerror_message\030\002 \001(\t*]\n\014Result"
  "Status\022\031\n\025RESULT_STATUS_SUCCESS\020\000\022\027\n\023RES"
  "ULT_STATUS_ERROR\020\001\022\031\n\025RESULT_STATUS_PEND"
  "ING\020\002*\210\001\n\010Operator\022\021\n\rOPERATOR_NONE\020\000\022\023\n"
  "\017OPERATOR_F_INIT\020\001\022\020\n\014OPERATOR_O_I\020\002\022\016\n\n"
  "OPERATOR_S\020\003\022\016\n\nOPERATOR_B\020\004\022\020\n\014OPERATOR"
  "_O_F\020\005\022\020\n\014OPERATOR_MAP\020\006*w\n\010LogLevel\022\023\n\017"
  "LOG_LEVEL_DEBUG\020\000\022\022\n\016LOG_LEVEL_INFO\020\001\022\025\n"
  "\021LOG_LEVEL_WARNING\020\003\022\023\n\017LOG_LEVEL_ERROR\020"
  "\004\022\026\n\022LOG_LEVEL_CRITICAL\020\005*\263\001\n\020ProfileEve"
  "ntType\022\037\n\033PROFILE_EVENT_TYPE_REGISTER\020\000\022"
  "\036\n\032PROFILE_EVENT_TYPE_CONNECT\020\004\022!\n\035PROFI"
  "LE_EVENT_TYPE_DEREGISTER\020\001\022\033\n\027PROFILE_EV"
  "ENT_TYPE_SEND\020\002\022\036\n\032PROFILE_EVENT_TYPE_RE"
  "CEIVE\020\003*\323\001\n\020SettingValueType\022\035\n\031SETTING_"
  "VALUE_TYPE_STRING\020\000\022\032\n\026SETTING_VALUE_TYP"
  "E_INT\020\001\022\034\n\030SETTING_VALUE_TYPE_FLOAT\020\002\022\033\n"
  "\027SETTING_VALUE_TYPE_BOOL\020\003\022!\n\035SETTING_VA"
  "LUE_TYPE_LIST_FLOAT\020\004\022&\n\"SETTING_VALUE_T"
  "YPE_LIST_LIST_FLOAT\020\0052\362\004\n\rMuscleManager\022"
  "[\n\020SubmitLogMessage\022#.muscle_manager_pro"
  "tocol.LogMessage\032\".muscle_manager_protoc"
  "ol.LogResult\022_\n\023SubmitProfileEvents\022 .mu"
  "scle_manager_protocol.Profile\032&.muscle_m"
  "anager_protocol.ProfileResult\022d\n\017Request"
  "Settings\022(.muscle_manager_protocol.Setti"
  "ngsRequest\032\'.muscle_manager_protocol.Set"
  "tingsResult\022m\n\020RegisterInstance\022,.muscle"
  "_manager_protocol.RegistrationRequest\032+."
  "muscle_manager_protocol.RegistrationResu"
  "lt\022Y\n\014RequestPeers\022$.muscle_manager_prot"
  "ocol.PeerRequest\032#.muscle_manager_protoc"
  "ol.PeerResult\022s\n\022DeregisterInstance\022..mu"
  "scle_manager_protocol.DeregistrationRequ"
  "est\032-.muscle_manager_protocol.Deregistra"
  "tionResultb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto = {
  false, InitDefaults_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto, 
  descriptor_table_protodef_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto,
  "muscle_manager_protocol/muscle_manager_protocol.proto", &assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto, 3498,
};

void AddDescriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto = []() { AddDescriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto(); return true; }();
namespace muscle_manager_protocol {
const ::google::protobuf::EnumDescriptor* ResultStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[0];
}
bool ResultStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Operator_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[1];
}
bool Operator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[2];
}
bool LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProfileEventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[3];
}
bool ProfileEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SettingValueType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[4];
}
bool SettingValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LogMessage::InitAsDefaultInstance() {
  ::muscle_manager_protocol::_LogMessage_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class LogMessage::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& timestamp(const LogMessage* msg);
};

const ::google::protobuf::Timestamp&
LogMessage::HasBitSetters::timestamp(const LogMessage* msg) {
  return *msg->timestamp_;
}
void LogMessage::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMessage::kInstanceIdFieldNumber;
const int LogMessage::kTimestampFieldNumber;
const int LogMessage::kLevelFieldNumber;
const int LogMessage::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMessage::LogMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.LogMessage)
}
LogMessage::LogMessage(const LogMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance_id().size() > 0) {
    instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_id_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.LogMessage)
}

void LogMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LogMessage_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(level_));
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.LogMessage)
  SharedDtor();
}

void LogMessage::SharedDtor() {
  instance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void LogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogMessage& LogMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LogMessage_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void LogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.LogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  level_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LogMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string instance_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.LogMessage.instance_id");
        object = msg->mutable_instance_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .muscle_manager_protocol.LogLevel level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_level(static_cast<::muscle_manager_protocol::LogLevel>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string text = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.LogMessage.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.LogMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string instance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_id().data(), static_cast<int>(this->instance_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.LogMessage.instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .muscle_manager_protocol.LogLevel level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::muscle_manager_protocol::LogLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.LogMessage.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.LogMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.LogMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.LogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_id = 1;
  if (this->instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_id().data(), static_cast<int>(this->instance_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.LogMessage.instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instance_id(), output);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::timestamp(this), output);
  }

  // .muscle_manager_protocol.LogLevel level = 4;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->level(), output);
  }

  // string text = 5;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.LogMessage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.LogMessage)
}

::google::protobuf::uint8* LogMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.LogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_id = 1;
  if (this->instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_id().data(), static_cast<int>(this->instance_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.LogMessage.instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::timestamp(this), target);
  }

  // .muscle_manager_protocol.LogLevel level = 4;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->level(), target);
  }

  // string text = 5;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.LogMessage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.LogMessage)
  return target;
}

size_t LogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.LogMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instance_id = 1;
  if (this->instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_id());
  }

  // string text = 5;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .muscle_manager_protocol.LogLevel level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LogMessage* source =
      ::google::protobuf::DynamicCastToGenerated<LogMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.LogMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.LogMessage)
    MergeFrom(*source);
  }
}

void LogMessage::MergeFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_id().size() > 0) {

    instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_id_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void LogMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessage::CopyFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  return true;
}

void LogMessage::Swap(LogMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMessage::InternalSwap(LogMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  instance_id_.Swap(&other->instance_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(level_, other->level_);
}

::google::protobuf::Metadata LogMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LogResult::InitAsDefaultInstance() {
}
class LogResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogResult::LogResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.LogResult)
}
LogResult::LogResult(const LogResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.LogResult)
}

void LogResult::SharedCtor() {
}

LogResult::~LogResult() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.LogResult)
  SharedDtor();
}

void LogResult::SharedDtor() {
}

void LogResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogResult& LogResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LogResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void LogResult::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.LogResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LogResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.LogResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.LogResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.LogResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.LogResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.LogResult)
}

::google::protobuf::uint8* LogResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.LogResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.LogResult)
  return target;
}

size_t LogResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.LogResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.LogResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LogResult* source =
      ::google::protobuf::DynamicCastToGenerated<LogResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.LogResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.LogResult)
    MergeFrom(*source);
  }
}

void LogResult::MergeFrom(const LogResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.LogResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LogResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.LogResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogResult::CopyFrom(const LogResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.LogResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogResult::IsInitialized() const {
  return true;
}

void LogResult::Swap(LogResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogResult::InternalSwap(LogResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Port::InitAsDefaultInstance() {
}
class Port::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Port::kNameFieldNumber;
const int Port::kOperatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Port::Port()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.Port)
}
Port::Port(const Port& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.Port)
}

void Port::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operator__ = 0;
}

Port::~Port() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.Port)
  SharedDtor();
}

void Port::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Port& Port::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void Port::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.Port)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operator__ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Port::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Port*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.Port.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .muscle_manager_protocol.Operator operator = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_operator_(static_cast<::muscle_manager_protocol::Operator>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Port::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.Port)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.Port.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .muscle_manager_protocol.Operator operator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operator_(static_cast< ::muscle_manager_protocol::Operator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.Port)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.Port)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Port::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.Port)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Port.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .muscle_manager_protocol.Operator operator = 2;
  if (this->operator_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operator_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.Port)
}

::google::protobuf::uint8* Port::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.Port)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Port.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .muscle_manager_protocol.Operator operator = 2;
  if (this->operator_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operator_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.Port)
  return target;
}

size_t Port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.Port)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .muscle_manager_protocol.Operator operator = 2;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Port::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.Port)
  GOOGLE_DCHECK_NE(&from, this);
  const Port* source =
      ::google::protobuf::DynamicCastToGenerated<Port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.Port)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.Port)
    MergeFrom(*source);
  }
}

void Port::MergeFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.Port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.operator_() != 0) {
    set_operator_(from.operator_());
  }
}

void Port::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Port::CopyFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Port::IsInitialized() const {
  return true;
}

void Port::Swap(Port* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Port::InternalSwap(Port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(operator__, other->operator__);
}

::google::protobuf::Metadata Port::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProfileEvent::InitAsDefaultInstance() {
  ::muscle_manager_protocol::_ProfileEvent_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::muscle_manager_protocol::_ProfileEvent_default_instance_._instance.get_mutable()->stop_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::muscle_manager_protocol::_ProfileEvent_default_instance_._instance.get_mutable()->port_ = const_cast< ::muscle_manager_protocol::Port*>(
      ::muscle_manager_protocol::Port::internal_default_instance());
}
class ProfileEvent::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& start_time(const ProfileEvent* msg);
  static const ::google::protobuf::Timestamp& stop_time(const ProfileEvent* msg);
  static const ::muscle_manager_protocol::Port& port(const ProfileEvent* msg);
};

const ::google::protobuf::Timestamp&
ProfileEvent::HasBitSetters::start_time(const ProfileEvent* msg) {
  return *msg->start_time_;
}
const ::google::protobuf::Timestamp&
ProfileEvent::HasBitSetters::stop_time(const ProfileEvent* msg) {
  return *msg->stop_time_;
}
const ::muscle_manager_protocol::Port&
ProfileEvent::HasBitSetters::port(const ProfileEvent* msg) {
  return *msg->port_;
}
void ProfileEvent::clear_start_time() {
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void ProfileEvent::clear_stop_time() {
  if (GetArenaNoVirtual() == nullptr && stop_time_ != nullptr) {
    delete stop_time_;
  }
  stop_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileEvent::kInstanceIdFieldNumber;
const int ProfileEvent::kStartTimeFieldNumber;
const int ProfileEvent::kStopTimeFieldNumber;
const int ProfileEvent::kEventTypeFieldNumber;
const int ProfileEvent::kPortFieldNumber;
const int ProfileEvent::kPortLengthFieldNumber;
const int ProfileEvent::kSlotFieldNumber;
const int ProfileEvent::kMessageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileEvent::ProfileEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.ProfileEvent)
}
ProfileEvent::ProfileEvent(const ProfileEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance_id().size() > 0) {
    instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_id_);
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from.has_stop_time()) {
    stop_time_ = new ::google::protobuf::Timestamp(*from.stop_time_);
  } else {
    stop_time_ = nullptr;
  }
  if (from.has_port()) {
    port_ = new ::muscle_manager_protocol::Port(*from.port_);
  } else {
    port_ = nullptr;
  }
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(slot_));
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.ProfileEvent)
}

void ProfileEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(slot_));
}

ProfileEvent::~ProfileEvent() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.ProfileEvent)
  SharedDtor();
}

void ProfileEvent::SharedDtor() {
  instance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete stop_time_;
  if (this != internal_default_instance()) delete port_;
}

void ProfileEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileEvent& ProfileEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void ProfileEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.ProfileEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stop_time_ != nullptr) {
    delete stop_time_;
  }
  stop_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && port_ != nullptr) {
    delete port_;
  }
  port_ = nullptr;
  ::memset(&event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&event_type_)) + sizeof(slot_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProfileEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProfileEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string instance_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.ProfileEvent.instance_id");
        object = msg->mutable_instance_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp start_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_start_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp stop_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_stop_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .muscle_manager_protocol.ProfileEventType event_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_event_type(static_cast<::muscle_manager_protocol::ProfileEventType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .muscle_manager_protocol.Port port = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::muscle_manager_protocol::Port::_InternalParse;
        object = msg->mutable_port();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 port_length = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_port_length(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 slot = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 message_size = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_message_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProfileEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.ProfileEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string instance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_id().data(), static_cast<int>(this->instance_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.ProfileEvent.instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp stop_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .muscle_manager_protocol.ProfileEventType event_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_type(static_cast< ::muscle_manager_protocol::ProfileEventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .muscle_manager_protocol.Port port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port_length = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 message_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.ProfileEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.ProfileEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProfileEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.ProfileEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_id = 1;
  if (this->instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_id().data(), static_cast<int>(this->instance_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.ProfileEvent.instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instance_id(), output);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::start_time(this), output);
  }

  // .google.protobuf.Timestamp stop_time = 3;
  if (this->has_stop_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::stop_time(this), output);
  }

  // .muscle_manager_protocol.ProfileEventType event_type = 4;
  if (this->event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->event_type(), output);
  }

  // .muscle_manager_protocol.Port port = 5;
  if (this->has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::port(this), output);
  }

  // int32 port_length = 6;
  if (this->port_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->port_length(), output);
  }

  // int32 slot = 7;
  if (this->slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->slot(), output);
  }

  // int64 message_size = 8;
  if (this->message_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->message_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.ProfileEvent)
}

::google::protobuf::uint8* ProfileEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.ProfileEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_id = 1;
  if (this->instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_id().data(), static_cast<int>(this->instance_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.ProfileEvent.instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance_id(), target);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::start_time(this), target);
  }

  // .google.protobuf.Timestamp stop_time = 3;
  if (this->has_stop_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::stop_time(this), target);
  }

  // .muscle_manager_protocol.ProfileEventType event_type = 4;
  if (this->event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->event_type(), target);
  }

  // .muscle_manager_protocol.Port port = 5;
  if (this->has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::port(this), target);
  }

  // int32 port_length = 6;
  if (this->port_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->port_length(), target);
  }

  // int32 slot = 7;
  if (this->slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->slot(), target);
  }

  // int64 message_size = 8;
  if (this->message_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->message_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.ProfileEvent)
  return target;
}

size_t ProfileEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.ProfileEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instance_id = 1;
  if (this->instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_id());
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp stop_time = 3;
  if (this->has_stop_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stop_time_);
  }

  // .muscle_manager_protocol.Port port = 5;
  if (this->has_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *port_);
  }

  // .muscle_manager_protocol.ProfileEventType event_type = 4;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
  }

  // int32 port_length = 6;
  if (this->port_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port_length());
  }

  // int64 message_size = 8;
  if (this->message_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_size());
  }

  // int32 slot = 7;
  if (this->slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.ProfileEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileEvent* source =
      ::google::protobuf::DynamicCastToGenerated<ProfileEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.ProfileEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.ProfileEvent)
    MergeFrom(*source);
  }
}

void ProfileEvent::MergeFrom(const ProfileEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.ProfileEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_id().size() > 0) {

    instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_id_);
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_stop_time()) {
    mutable_stop_time()->::google::protobuf::Timestamp::MergeFrom(from.stop_time());
  }
  if (from.has_port()) {
    mutable_port()->::muscle_manager_protocol::Port::MergeFrom(from.port());
  }
  if (from.event_type() != 0) {
    set_event_type(from.event_type());
  }
  if (from.port_length() != 0) {
    set_port_length(from.port_length());
  }
  if (from.message_size() != 0) {
    set_message_size(from.message_size());
  }
  if (from.slot() != 0) {
    set_slot(from.slot());
  }
}

void ProfileEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.ProfileEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileEvent::CopyFrom(const ProfileEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.ProfileEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileEvent::IsInitialized() const {
  return true;
}

void ProfileEvent::Swap(ProfileEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileEvent::InternalSwap(ProfileEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  instance_id_.Swap(&other->instance_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_time_, other->start_time_);
  swap(stop_time_, other->stop_time_);
  swap(port_, other->port_);
  swap(event_type_, other->event_type_);
  swap(port_length_, other->port_length_);
  swap(message_size_, other->message_size_);
  swap(slot_, other->slot_);
}

::google::protobuf::Metadata ProfileEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Profile::InitAsDefaultInstance() {
}
class Profile::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Profile::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Profile::Profile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.Profile)
}
Profile::Profile(const Profile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.Profile)
}

void Profile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Profile_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.Profile)
  SharedDtor();
}

void Profile::SharedDtor() {
}

void Profile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Profile& Profile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Profile_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.Profile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Profile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Profile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .muscle_manager_protocol.ProfileEvent events = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::muscle_manager_protocol::ProfileEvent::_InternalParse;
          object = msg->add_events();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Profile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.Profile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .muscle_manager_protocol.ProfileEvent events = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.Profile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.Profile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Profile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.Profile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.ProfileEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->events(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.Profile)
}

::google::protobuf::uint8* Profile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.Profile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.ProfileEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->events(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.Profile)
  return target;
}

size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.Profile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.ProfileEvent events = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Profile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile* source =
      ::google::protobuf::DynamicCastToGenerated<Profile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.Profile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.Profile)
    MergeFrom(*source);
  }
}

void Profile::MergeFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void Profile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  return true;
}

void Profile::Swap(Profile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Profile::InternalSwap(Profile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
}

::google::protobuf::Metadata Profile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProfileResult::InitAsDefaultInstance() {
}
class ProfileResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileResult::ProfileResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.ProfileResult)
}
ProfileResult::ProfileResult(const ProfileResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.ProfileResult)
}

void ProfileResult::SharedCtor() {
}

ProfileResult::~ProfileResult() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.ProfileResult)
  SharedDtor();
}

void ProfileResult::SharedDtor() {
}

void ProfileResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileResult& ProfileResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProfileResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void ProfileResult::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.ProfileResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProfileResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProfileResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProfileResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.ProfileResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.ProfileResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.ProfileResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProfileResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.ProfileResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.ProfileResult)
}

::google::protobuf::uint8* ProfileResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.ProfileResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.ProfileResult)
  return target;
}

size_t ProfileResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.ProfileResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.ProfileResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileResult* source =
      ::google::protobuf::DynamicCastToGenerated<ProfileResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.ProfileResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.ProfileResult)
    MergeFrom(*source);
  }
}

void ProfileResult::MergeFrom(const ProfileResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.ProfileResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProfileResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.ProfileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileResult::CopyFrom(const ProfileResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.ProfileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileResult::IsInitialized() const {
  return true;
}

void ProfileResult::Swap(ProfileResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileResult::InternalSwap(ProfileResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProfileResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegistrationRequest::InitAsDefaultInstance() {
}
class RegistrationRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegistrationRequest::kInstanceNameFieldNumber;
const int RegistrationRequest::kNetworkLocationsFieldNumber;
const int RegistrationRequest::kPortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegistrationRequest::RegistrationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.RegistrationRequest)
}
RegistrationRequest::RegistrationRequest(const RegistrationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      network_locations_(from.network_locations_),
      ports_(from.ports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance_name().size() > 0) {
    instance_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.RegistrationRequest)
}

void RegistrationRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  instance_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegistrationRequest::~RegistrationRequest() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.RegistrationRequest)
  SharedDtor();
}

void RegistrationRequest::SharedDtor() {
  instance_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegistrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistrationRequest& RegistrationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void RegistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.RegistrationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_locations_.Clear();
  ports_.Clear();
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegistrationRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegistrationRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string instance_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.RegistrationRequest.instance_name");
        object = msg->mutable_instance_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string network_locations = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.RegistrationRequest.network_locations");
          object = msg->add_network_locations();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .muscle_manager_protocol.Port ports = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::muscle_manager_protocol::Port::_InternalParse;
          object = msg->add_ports();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegistrationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.RegistrationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string instance_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_name().data(), static_cast<int>(this->instance_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.RegistrationRequest.instance_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string network_locations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_network_locations()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network_locations(this->network_locations_size() - 1).data(),
            static_cast<int>(this->network_locations(this->network_locations_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.RegistrationRequest.network_locations"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .muscle_manager_protocol.Port ports = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.RegistrationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.RegistrationRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegistrationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.RegistrationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_name().data(), static_cast<int>(this->instance_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.RegistrationRequest.instance_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instance_name(), output);
  }

  // repeated string network_locations = 2;
  for (int i = 0, n = this->network_locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_locations(i).data(), static_cast<int>(this->network_locations(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.RegistrationRequest.network_locations");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->network_locations(i), output);
  }

  // repeated .muscle_manager_protocol.Port ports = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->ports(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.RegistrationRequest)
}

::google::protobuf::uint8* RegistrationRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.RegistrationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_name().data(), static_cast<int>(this->instance_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.RegistrationRequest.instance_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance_name(), target);
  }

  // repeated string network_locations = 2;
  for (int i = 0, n = this->network_locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_locations(i).data(), static_cast<int>(this->network_locations(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.RegistrationRequest.network_locations");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->network_locations(i), target);
  }

  // repeated .muscle_manager_protocol.Port ports = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->ports(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.RegistrationRequest)
  return target;
}

size_t RegistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.RegistrationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string network_locations = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->network_locations_size());
  for (int i = 0, n = this->network_locations_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->network_locations(i));
  }

  // repeated .muscle_manager_protocol.Port ports = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ports(static_cast<int>(i)));
    }
  }

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistrationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.RegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegistrationRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RegistrationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.RegistrationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.RegistrationRequest)
    MergeFrom(*source);
  }
}

void RegistrationRequest::MergeFrom(const RegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.RegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  network_locations_.MergeFrom(from.network_locations_);
  ports_.MergeFrom(from.ports_);
  if (from.instance_name().size() > 0) {

    instance_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
}

void RegistrationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.RegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationRequest::CopyFrom(const RegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.RegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationRequest::IsInitialized() const {
  return true;
}

void RegistrationRequest::Swap(RegistrationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegistrationRequest::InternalSwap(RegistrationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  network_locations_.InternalSwap(CastToBase(&other->network_locations_));
  CastToBase(&ports_)->InternalSwap(CastToBase(&other->ports_));
  instance_name_.Swap(&other->instance_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata RegistrationRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegistrationResult::InitAsDefaultInstance() {
}
class RegistrationResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegistrationResult::kStatusFieldNumber;
const int RegistrationResult::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegistrationResult::RegistrationResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.RegistrationResult)
}
RegistrationResult::RegistrationResult(const RegistrationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.RegistrationResult)
}

void RegistrationResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

RegistrationResult::~RegistrationResult() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.RegistrationResult)
  SharedDtor();
}

void RegistrationResult::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegistrationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistrationResult& RegistrationResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void RegistrationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.RegistrationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegistrationResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegistrationResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .muscle_manager_protocol.ResultStatus status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::muscle_manager_protocol::ResultStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string error_message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.RegistrationResult.error_message");
        object = msg->mutable_error_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegistrationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.RegistrationResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .muscle_manager_protocol.ResultStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::muscle_manager_protocol::ResultStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.RegistrationResult.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.RegistrationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.RegistrationResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegistrationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.RegistrationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.RegistrationResult.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.RegistrationResult)
}

::google::protobuf::uint8* RegistrationResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.RegistrationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.RegistrationResult.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.RegistrationResult)
  return target;
}

size_t RegistrationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.RegistrationResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistrationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.RegistrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RegistrationResult* source =
      ::google::protobuf::DynamicCastToGenerated<RegistrationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.RegistrationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.RegistrationResult)
    MergeFrom(*source);
  }
}

void RegistrationResult::MergeFrom(const RegistrationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.RegistrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void RegistrationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.RegistrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationResult::CopyFrom(const RegistrationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.RegistrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationResult::IsInitialized() const {
  return true;
}

void RegistrationResult::Swap(RegistrationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegistrationResult::InternalSwap(RegistrationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::google::protobuf::Metadata RegistrationResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Conduit::InitAsDefaultInstance() {
}
class Conduit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Conduit::kSenderFieldNumber;
const int Conduit::kReceiverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Conduit::Conduit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.Conduit)
}
Conduit::Conduit(const Conduit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender().size() > 0) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  receiver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.receiver().size() > 0) {
    receiver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_);
  }
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.Conduit)
}

void Conduit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Conduit::~Conduit() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.Conduit)
  SharedDtor();
}

void Conduit::SharedDtor() {
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Conduit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Conduit& Conduit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void Conduit::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.Conduit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Conduit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Conduit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string sender = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.Conduit.sender");
        object = msg->mutable_sender();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string receiver = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.Conduit.receiver");
        object = msg->mutable_receiver();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Conduit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.Conduit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.Conduit.sender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string receiver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->receiver().data(), static_cast<int>(this->receiver().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.Conduit.receiver"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.Conduit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.Conduit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Conduit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.Conduit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Conduit.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sender(), output);
  }

  // string receiver = 2;
  if (this->receiver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver().data(), static_cast<int>(this->receiver().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Conduit.receiver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->receiver(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.Conduit)
}

::google::protobuf::uint8* Conduit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.Conduit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Conduit.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // string receiver = 2;
  if (this->receiver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver().data(), static_cast<int>(this->receiver().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Conduit.receiver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->receiver(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.Conduit)
  return target;
}

size_t Conduit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.Conduit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  // string receiver = 2;
  if (this->receiver().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receiver());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Conduit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.Conduit)
  GOOGLE_DCHECK_NE(&from, this);
  const Conduit* source =
      ::google::protobuf::DynamicCastToGenerated<Conduit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.Conduit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.Conduit)
    MergeFrom(*source);
  }
}

void Conduit::MergeFrom(const Conduit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.Conduit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  if (from.receiver().size() > 0) {

    receiver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_);
  }
}

void Conduit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.Conduit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conduit::CopyFrom(const Conduit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.Conduit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conduit::IsInitialized() const {
  return true;
}

void Conduit::Swap(Conduit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Conduit::InternalSwap(Conduit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sender_.Swap(&other->sender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  receiver_.Swap(&other->receiver_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Conduit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PeerRequest::InitAsDefaultInstance() {
}
class PeerRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerRequest::kInstanceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerRequest::PeerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.PeerRequest)
}
PeerRequest::PeerRequest(const PeerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance_name().size() > 0) {
    instance_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.PeerRequest)
}

void PeerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PeerRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  instance_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerRequest::~PeerRequest() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.PeerRequest)
  SharedDtor();
}

void PeerRequest::SharedDtor() {
  instance_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerRequest& PeerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PeerRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void PeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.PeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PeerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string instance_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.PeerRequest.instance_name");
        object = msg->mutable_instance_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.PeerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string instance_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_name().data(), static_cast<int>(this->instance_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.PeerRequest.instance_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.PeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.PeerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.PeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_name().data(), static_cast<int>(this->instance_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerRequest.instance_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instance_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.PeerRequest)
}

::google::protobuf::uint8* PeerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.PeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_name().data(), static_cast<int>(this->instance_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerRequest.instance_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.PeerRequest)
  return target;
}

size_t PeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.PeerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.PeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.PeerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.PeerRequest)
    MergeFrom(*source);
  }
}

void PeerRequest::MergeFrom(const PeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.PeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_name().size() > 0) {

    instance_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
}

void PeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.PeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerRequest::CopyFrom(const PeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.PeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerRequest::IsInitialized() const {
  return true;
}

void PeerRequest::Swap(PeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerRequest::InternalSwap(PeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  instance_name_.Swap(&other->instance_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PeerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PeerResult_PeerDimensions::InitAsDefaultInstance() {
}
class PeerResult_PeerDimensions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerResult_PeerDimensions::kPeerNameFieldNumber;
const int PeerResult_PeerDimensions::kDimensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerResult_PeerDimensions::PeerResult_PeerDimensions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.PeerResult.PeerDimensions)
}
PeerResult_PeerDimensions::PeerResult_PeerDimensions(const PeerResult_PeerDimensions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      dimensions_(from.dimensions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.peer_name().size() > 0) {
    peer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_name_);
  }
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.PeerResult.PeerDimensions)
}

void PeerResult_PeerDimensions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  peer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerResult_PeerDimensions::~PeerResult_PeerDimensions() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.PeerResult.PeerDimensions)
  SharedDtor();
}

void PeerResult_PeerDimensions::SharedDtor() {
  peer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerResult_PeerDimensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerResult_PeerDimensions& PeerResult_PeerDimensions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void PeerResult_PeerDimensions::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  peer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerResult_PeerDimensions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PeerResult_PeerDimensions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string peer_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.PeerResult.PeerDimensions.peer_name");
        object = msg->mutable_peer_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated int32 dimensions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_dimensions();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_dimensions(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerResult_PeerDimensions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string peer_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peer_name().data(), static_cast<int>(this->peer_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.PeerResult.PeerDimensions.peer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dimensions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dimensions())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_dimensions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.PeerResult.PeerDimensions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.PeerResult.PeerDimensions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerResult_PeerDimensions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string peer_name = 1;
  if (this->peer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_name().data(), static_cast<int>(this->peer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerResult.PeerDimensions.peer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->peer_name(), output);
  }

  // repeated int32 dimensions = 2;
  if (this->dimensions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dimensions_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->dimensions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->dimensions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.PeerResult.PeerDimensions)
}

::google::protobuf::uint8* PeerResult_PeerDimensions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string peer_name = 1;
  if (this->peer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_name().data(), static_cast<int>(this->peer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerResult.PeerDimensions.peer_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->peer_name(), target);
  }

  // repeated int32 dimensions = 2;
  if (this->dimensions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _dimensions_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dimensions_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.PeerResult.PeerDimensions)
  return target;
}

size_t PeerResult_PeerDimensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dimensions = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string peer_name = 1;
  if (this->peer_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerResult_PeerDimensions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerResult_PeerDimensions* source =
      ::google::protobuf::DynamicCastToGenerated<PeerResult_PeerDimensions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.PeerResult.PeerDimensions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.PeerResult.PeerDimensions)
    MergeFrom(*source);
  }
}

void PeerResult_PeerDimensions::MergeFrom(const PeerResult_PeerDimensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
  if (from.peer_name().size() > 0) {

    peer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_name_);
  }
}

void PeerResult_PeerDimensions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerResult_PeerDimensions::CopyFrom(const PeerResult_PeerDimensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerResult_PeerDimensions::IsInitialized() const {
  return true;
}

void PeerResult_PeerDimensions::Swap(PeerResult_PeerDimensions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerResult_PeerDimensions::InternalSwap(PeerResult_PeerDimensions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dimensions_.InternalSwap(&other->dimensions_);
  peer_name_.Swap(&other->peer_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PeerResult_PeerDimensions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PeerResult_PeerLocations::InitAsDefaultInstance() {
}
class PeerResult_PeerLocations::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerResult_PeerLocations::kInstanceNameFieldNumber;
const int PeerResult_PeerLocations::kLocationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerResult_PeerLocations::PeerResult_PeerLocations()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.PeerResult.PeerLocations)
}
PeerResult_PeerLocations::PeerResult_PeerLocations(const PeerResult_PeerLocations& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      locations_(from.locations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance_name().size() > 0) {
    instance_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.PeerResult.PeerLocations)
}

void PeerResult_PeerLocations::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  instance_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerResult_PeerLocations::~PeerResult_PeerLocations() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.PeerResult.PeerLocations)
  SharedDtor();
}

void PeerResult_PeerLocations::SharedDtor() {
  instance_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerResult_PeerLocations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerResult_PeerLocations& PeerResult_PeerLocations::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void PeerResult_PeerLocations::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.PeerResult.PeerLocations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locations_.Clear();
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerResult_PeerLocations::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PeerResult_PeerLocations*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string instance_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.PeerResult.PeerLocations.instance_name");
        object = msg->mutable_instance_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string locations = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.PeerResult.PeerLocations.locations");
          object = msg->add_locations();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerResult_PeerLocations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.PeerResult.PeerLocations)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string instance_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_name().data(), static_cast<int>(this->instance_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.PeerResult.PeerLocations.instance_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string locations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_locations()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->locations(this->locations_size() - 1).data(),
            static_cast<int>(this->locations(this->locations_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.PeerResult.PeerLocations.locations"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.PeerResult.PeerLocations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.PeerResult.PeerLocations)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerResult_PeerLocations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.PeerResult.PeerLocations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_name().data(), static_cast<int>(this->instance_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerResult.PeerLocations.instance_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instance_name(), output);
  }

  // repeated string locations = 2;
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locations(i).data(), static_cast<int>(this->locations(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerResult.PeerLocations.locations");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->locations(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.PeerResult.PeerLocations)
}

::google::protobuf::uint8* PeerResult_PeerLocations::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.PeerResult.PeerLocations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_name().data(), static_cast<int>(this->instance_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerResult.PeerLocations.instance_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance_name(), target);
  }

  // repeated string locations = 2;
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locations(i).data(), static_cast<int>(this->locations(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerResult.PeerLocations.locations");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->locations(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.PeerResult.PeerLocations)
  return target;
}

size_t PeerResult_PeerLocations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.PeerResult.PeerLocations)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string locations = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->locations_size());
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->locations(i));
  }

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerResult_PeerLocations::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.PeerResult.PeerLocations)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerResult_PeerLocations* source =
      ::google::protobuf::DynamicCastToGenerated<PeerResult_PeerLocations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.PeerResult.PeerLocations)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.PeerResult.PeerLocations)
    MergeFrom(*source);
  }
}

void PeerResult_PeerLocations::MergeFrom(const PeerResult_PeerLocations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.PeerResult.PeerLocations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locations_.MergeFrom(from.locations_);
  if (from.instance_name().size() > 0) {

    instance_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
}

void PeerResult_PeerLocations::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.PeerResult.PeerLocations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerResult_PeerLocations::CopyFrom(const PeerResult_PeerLocations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.PeerResult.PeerLocations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerResult_PeerLocations::IsInitialized() const {
  return true;
}

void PeerResult_PeerLocations::Swap(PeerResult_PeerLocations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerResult_PeerLocations::InternalSwap(PeerResult_PeerLocations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  locations_.InternalSwap(CastToBase(&other->locations_));
  instance_name_.Swap(&other->instance_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PeerResult_PeerLocations::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PeerResult::InitAsDefaultInstance() {
}
class PeerResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerResult::kStatusFieldNumber;
const int PeerResult::kErrorMessageFieldNumber;
const int PeerResult::kConduitsFieldNumber;
const int PeerResult::kPeerDimensionsFieldNumber;
const int PeerResult::kPeerLocationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerResult::PeerResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.PeerResult)
}
PeerResult::PeerResult(const PeerResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      conduits_(from.conduits_),
      peer_dimensions_(from.peer_dimensions_),
      peer_locations_(from.peer_locations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.PeerResult)
}

void PeerResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PeerResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

PeerResult::~PeerResult() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.PeerResult)
  SharedDtor();
}

void PeerResult::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerResult& PeerResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PeerResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void PeerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.PeerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conduits_.Clear();
  peer_dimensions_.Clear();
  peer_locations_.Clear();
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PeerResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .muscle_manager_protocol.ResultStatus status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::muscle_manager_protocol::ResultStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string error_message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.PeerResult.error_message");
        object = msg->mutable_error_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .muscle_manager_protocol.Conduit conduits = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::muscle_manager_protocol::Conduit::_InternalParse;
          object = msg->add_conduits();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .muscle_manager_protocol.PeerResult.PeerDimensions peer_dimensions = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::muscle_manager_protocol::PeerResult_PeerDimensions::_InternalParse;
          object = msg->add_peer_dimensions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .muscle_manager_protocol.PeerResult.PeerLocations peer_locations = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::muscle_manager_protocol::PeerResult_PeerLocations::_InternalParse;
          object = msg->add_peer_locations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.PeerResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .muscle_manager_protocol.ResultStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::muscle_manager_protocol::ResultStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.PeerResult.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .muscle_manager_protocol.Conduit conduits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_conduits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .muscle_manager_protocol.PeerResult.PeerDimensions peer_dimensions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_peer_dimensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .muscle_manager_protocol.PeerResult.PeerLocations peer_locations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_peer_locations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.PeerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.PeerResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.PeerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerResult.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // repeated .muscle_manager_protocol.Conduit conduits = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conduits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->conduits(static_cast<int>(i)),
      output);
  }

  // repeated .muscle_manager_protocol.PeerResult.PeerDimensions peer_dimensions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peer_dimensions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->peer_dimensions(static_cast<int>(i)),
      output);
  }

  // repeated .muscle_manager_protocol.PeerResult.PeerLocations peer_locations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peer_locations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->peer_locations(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.PeerResult)
}

::google::protobuf::uint8* PeerResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.PeerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerResult.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // repeated .muscle_manager_protocol.Conduit conduits = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conduits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->conduits(static_cast<int>(i)), target);
  }

  // repeated .muscle_manager_protocol.PeerResult.PeerDimensions peer_dimensions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peer_dimensions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->peer_dimensions(static_cast<int>(i)), target);
  }

  // repeated .muscle_manager_protocol.PeerResult.PeerLocations peer_locations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peer_locations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->peer_locations(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.PeerResult)
  return target;
}

size_t PeerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.PeerResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.Conduit conduits = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->conduits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->conduits(static_cast<int>(i)));
    }
  }

  // repeated .muscle_manager_protocol.PeerResult.PeerDimensions peer_dimensions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->peer_dimensions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->peer_dimensions(static_cast<int>(i)));
    }
  }

  // repeated .muscle_manager_protocol.PeerResult.PeerLocations peer_locations = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->peer_locations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->peer_locations(static_cast<int>(i)));
    }
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.PeerResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerResult* source =
      ::google::protobuf::DynamicCastToGenerated<PeerResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.PeerResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.PeerResult)
    MergeFrom(*source);
  }
}

void PeerResult::MergeFrom(const PeerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.PeerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conduits_.MergeFrom(from.conduits_);
  peer_dimensions_.MergeFrom(from.peer_dimensions_);
  peer_locations_.MergeFrom(from.peer_locations_);
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void PeerResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.PeerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerResult::CopyFrom(const PeerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.PeerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerResult::IsInitialized() const {
  return true;
}

void PeerResult::Swap(PeerResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerResult::InternalSwap(PeerResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&conduits_)->InternalSwap(CastToBase(&other->conduits_));
  CastToBase(&peer_dimensions_)->InternalSwap(CastToBase(&other->peer_dimensions_));
  CastToBase(&peer_locations_)->InternalSwap(CastToBase(&other->peer_locations_));
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::google::protobuf::Metadata PeerResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListOfDouble::InitAsDefaultInstance() {
}
class ListOfDouble::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListOfDouble::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListOfDouble::ListOfDouble()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.ListOfDouble)
}
ListOfDouble::ListOfDouble(const ListOfDouble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.ListOfDouble)
}

void ListOfDouble::SharedCtor() {
}

ListOfDouble::~ListOfDouble() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.ListOfDouble)
  SharedDtor();
}

void ListOfDouble::SharedDtor() {
}

void ListOfDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOfDouble& ListOfDouble::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void ListOfDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.ListOfDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListOfDouble::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListOfDouble*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated double values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_values();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        do {
          msg->add_values(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListOfDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.ListOfDouble)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.ListOfDouble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.ListOfDouble)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListOfDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.ListOfDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double values = 1;
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->values().data(), this->values_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.ListOfDouble)
}

::google::protobuf::uint8* ListOfDouble::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.ListOfDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double values = 1;
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _values_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->values_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.ListOfDouble)
  return target;
}

size_t ListOfDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.ListOfDouble)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOfDouble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.ListOfDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOfDouble* source =
      ::google::protobuf::DynamicCastToGenerated<ListOfDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.ListOfDouble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.ListOfDouble)
    MergeFrom(*source);
  }
}

void ListOfDouble::MergeFrom(const ListOfDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.ListOfDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ListOfDouble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.ListOfDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOfDouble::CopyFrom(const ListOfDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.ListOfDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOfDouble::IsInitialized() const {
  return true;
}

void ListOfDouble::Swap(ListOfDouble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListOfDouble::InternalSwap(ListOfDouble* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::google::protobuf::Metadata ListOfDouble::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListOfListOfDouble::InitAsDefaultInstance() {
}
class ListOfListOfDouble::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListOfListOfDouble::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListOfListOfDouble::ListOfListOfDouble()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.ListOfListOfDouble)
}
ListOfListOfDouble::ListOfListOfDouble(const ListOfListOfDouble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.ListOfListOfDouble)
}

void ListOfListOfDouble::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
}

ListOfListOfDouble::~ListOfListOfDouble() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.ListOfListOfDouble)
  SharedDtor();
}

void ListOfListOfDouble::SharedDtor() {
}

void ListOfListOfDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOfListOfDouble& ListOfListOfDouble::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void ListOfListOfDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.ListOfListOfDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListOfListOfDouble::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListOfListOfDouble*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .muscle_manager_protocol.ListOfDouble values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::muscle_manager_protocol::ListOfDouble::_InternalParse;
          object = msg->add_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListOfListOfDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.ListOfListOfDouble)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .muscle_manager_protocol.ListOfDouble values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.ListOfListOfDouble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.ListOfListOfDouble)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListOfListOfDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.ListOfListOfDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.ListOfDouble values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.ListOfListOfDouble)
}

::google::protobuf::uint8* ListOfListOfDouble::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.ListOfListOfDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.ListOfDouble values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->values(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.ListOfListOfDouble)
  return target;
}

size_t ListOfListOfDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.ListOfListOfDouble)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.ListOfDouble values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->values(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOfListOfDouble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.ListOfListOfDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOfListOfDouble* source =
      ::google::protobuf::DynamicCastToGenerated<ListOfListOfDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.ListOfListOfDouble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.ListOfListOfDouble)
    MergeFrom(*source);
  }
}

void ListOfListOfDouble::MergeFrom(const ListOfListOfDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.ListOfListOfDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ListOfListOfDouble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.ListOfListOfDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOfListOfDouble::CopyFrom(const ListOfListOfDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.ListOfListOfDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOfListOfDouble::IsInitialized() const {
  return true;
}

void ListOfListOfDouble::Swap(ListOfListOfDouble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListOfListOfDouble::InternalSwap(ListOfListOfDouble* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&values_)->InternalSwap(CastToBase(&other->values_));
}

::google::protobuf::Metadata ListOfListOfDouble::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Setting::InitAsDefaultInstance() {
  ::muscle_manager_protocol::_Setting_default_instance_._instance.get_mutable()->value_list_float_ = const_cast< ::muscle_manager_protocol::ListOfDouble*>(
      ::muscle_manager_protocol::ListOfDouble::internal_default_instance());
  ::muscle_manager_protocol::_Setting_default_instance_._instance.get_mutable()->value_list_list_float_ = const_cast< ::muscle_manager_protocol::ListOfListOfDouble*>(
      ::muscle_manager_protocol::ListOfListOfDouble::internal_default_instance());
}
class Setting::HasBitSetters {
 public:
  static const ::muscle_manager_protocol::ListOfDouble& value_list_float(const Setting* msg);
  static const ::muscle_manager_protocol::ListOfListOfDouble& value_list_list_float(const Setting* msg);
};

const ::muscle_manager_protocol::ListOfDouble&
Setting::HasBitSetters::value_list_float(const Setting* msg) {
  return *msg->value_list_float_;
}
const ::muscle_manager_protocol::ListOfListOfDouble&
Setting::HasBitSetters::value_list_list_float(const Setting* msg) {
  return *msg->value_list_list_float_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Setting::kNameFieldNumber;
const int Setting::kValueTypeFieldNumber;
const int Setting::kValueStringFieldNumber;
const int Setting::kValueIntFieldNumber;
const int Setting::kValueFloatFieldNumber;
const int Setting::kValueBoolFieldNumber;
const int Setting::kValueListFloatFieldNumber;
const int Setting::kValueListListFloatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Setting::Setting()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.Setting)
}
Setting::Setting(const Setting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value_string().size() > 0) {
    value_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_string_);
  }
  if (from.has_value_list_float()) {
    value_list_float_ = new ::muscle_manager_protocol::ListOfDouble(*from.value_list_float_);
  } else {
    value_list_float_ = nullptr;
  }
  if (from.has_value_list_list_float()) {
    value_list_list_float_ = new ::muscle_manager_protocol::ListOfListOfDouble(*from.value_list_list_float_);
  } else {
    value_list_list_float_ = nullptr;
  }
  ::memcpy(&value_int_, &from.value_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_float_) -
    reinterpret_cast<char*>(&value_int_)) + sizeof(value_float_));
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.Setting)
}

void Setting::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_list_float_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_float_) -
      reinterpret_cast<char*>(&value_list_float_)) + sizeof(value_float_));
}

Setting::~Setting() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.Setting)
  SharedDtor();
}

void Setting::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_list_float_;
  if (this != internal_default_instance()) delete value_list_list_float_;
}

void Setting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Setting& Setting::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void Setting::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_list_float_ != nullptr) {
    delete value_list_float_;
  }
  value_list_float_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_list_list_float_ != nullptr) {
    delete value_list_list_float_;
  }
  value_list_list_float_ = nullptr;
  ::memset(&value_int_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_float_) -
      reinterpret_cast<char*>(&value_int_)) + sizeof(value_float_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Setting::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Setting*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.Setting.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .muscle_manager_protocol.SettingValueType value_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_value_type(static_cast<::muscle_manager_protocol::SettingValueType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string value_string = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.Setting.value_string");
        object = msg->mutable_value_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 value_int = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_value_int(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double value_float = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_value_float(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // bool value_bool = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_value_bool(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .muscle_manager_protocol.ListOfDouble value_list_float = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::muscle_manager_protocol::ListOfDouble::_InternalParse;
        object = msg->mutable_value_list_float();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .muscle_manager_protocol.ListOfListOfDouble value_list_list_float = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::muscle_manager_protocol::ListOfListOfDouble::_InternalParse;
        object = msg->mutable_value_list_list_float();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Setting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.Setting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.Setting.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .muscle_manager_protocol.SettingValueType value_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value_type(static_cast< ::muscle_manager_protocol::SettingValueType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value_string().data(), static_cast<int>(this->value_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.Setting.value_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 value_int = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value_float = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool value_bool = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .muscle_manager_protocol.ListOfDouble value_list_float = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value_list_float()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .muscle_manager_protocol.ListOfListOfDouble value_list_list_float = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value_list_list_float()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.Setting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.Setting)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Setting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Setting.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .muscle_manager_protocol.SettingValueType value_type = 2;
  if (this->value_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value_type(), output);
  }

  // string value_string = 3;
  if (this->value_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value_string().data(), static_cast<int>(this->value_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Setting.value_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value_string(), output);
  }

  // int64 value_int = 4;
  if (this->value_int() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->value_int(), output);
  }

  // double value_float = 5;
  if (this->value_float() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->value_float(), output);
  }

  // bool value_bool = 6;
  if (this->value_bool() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->value_bool(), output);
  }

  // .muscle_manager_protocol.ListOfDouble value_list_float = 7;
  if (this->has_value_list_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::value_list_float(this), output);
  }

  // .muscle_manager_protocol.ListOfListOfDouble value_list_list_float = 8;
  if (this->has_value_list_list_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::value_list_list_float(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.Setting)
}

::google::protobuf::uint8* Setting::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Setting.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .muscle_manager_protocol.SettingValueType value_type = 2;
  if (this->value_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value_type(), target);
  }

  // string value_string = 3;
  if (this->value_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value_string().data(), static_cast<int>(this->value_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Setting.value_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value_string(), target);
  }

  // int64 value_int = 4;
  if (this->value_int() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->value_int(), target);
  }

  // double value_float = 5;
  if (this->value_float() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->value_float(), target);
  }

  // bool value_bool = 6;
  if (this->value_bool() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->value_bool(), target);
  }

  // .muscle_manager_protocol.ListOfDouble value_list_float = 7;
  if (this->has_value_list_float()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::value_list_float(this), target);
  }

  // .muscle_manager_protocol.ListOfListOfDouble value_list_list_float = 8;
  if (this->has_value_list_list_float()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::value_list_list_float(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.Setting)
  return target;
}

size_t Setting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.Setting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string value_string = 3;
  if (this->value_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value_string());
  }

  // .muscle_manager_protocol.ListOfDouble value_list_float = 7;
  if (this->has_value_list_float()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_list_float_);
  }

  // .muscle_manager_protocol.ListOfListOfDouble value_list_list_float = 8;
  if (this->has_value_list_list_float()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_list_list_float_);
  }

  // int64 value_int = 4;
  if (this->value_int() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value_int());
  }

  // .muscle_manager_protocol.SettingValueType value_type = 2;
  if (this->value_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_type());
  }

  // bool value_bool = 6;
  if (this->value_bool() != 0) {
    total_size += 1 + 1;
  }

  // double value_float = 5;
  if (this->value_float() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Setting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  const Setting* source =
      ::google::protobuf::DynamicCastToGenerated<Setting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.Setting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.Setting)
    MergeFrom(*source);
  }
}

void Setting::MergeFrom(const Setting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value_string().size() > 0) {

    value_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_string_);
  }
  if (from.has_value_list_float()) {
    mutable_value_list_float()->::muscle_manager_protocol::ListOfDouble::MergeFrom(from.value_list_float());
  }
  if (from.has_value_list_list_float()) {
    mutable_value_list_list_float()->::muscle_manager_protocol::ListOfListOfDouble::MergeFrom(from.value_list_list_float());
  }
  if (from.value_int() != 0) {
    set_value_int(from.value_int());
  }
  if (from.value_type() != 0) {
    set_value_type(from.value_type());
  }
  if (from.value_bool() != 0) {
    set_value_bool(from.value_bool());
  }
  if (from.value_float() != 0) {
    set_value_float(from.value_float());
  }
}

void Setting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Setting::CopyFrom(const Setting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Setting::IsInitialized() const {
  return true;
}

void Setting::Swap(Setting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Setting::InternalSwap(Setting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_string_.Swap(&other->value_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_list_float_, other->value_list_float_);
  swap(value_list_list_float_, other->value_list_list_float_);
  swap(value_int_, other->value_int_);
  swap(value_type_, other->value_type_);
  swap(value_bool_, other->value_bool_);
  swap(value_float_, other->value_float_);
}

::google::protobuf::Metadata Setting::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettingsRequest::InitAsDefaultInstance() {
}
class SettingsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingsRequest::SettingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.SettingsRequest)
}
SettingsRequest::SettingsRequest(const SettingsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.SettingsRequest)
}

void SettingsRequest::SharedCtor() {
}

SettingsRequest::~SettingsRequest() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.SettingsRequest)
  SharedDtor();
}

void SettingsRequest::SharedDtor() {
}

void SettingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingsRequest& SettingsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettingsRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void SettingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.SettingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettingsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettingsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.SettingsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.SettingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.SettingsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.SettingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.SettingsRequest)
}

::google::protobuf::uint8* SettingsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.SettingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.SettingsRequest)
  return target;
}

size_t SettingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.SettingsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.SettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SettingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.SettingsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.SettingsRequest)
    MergeFrom(*source);
  }
}

void SettingsRequest::MergeFrom(const SettingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.SettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SettingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.SettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsRequest::CopyFrom(const SettingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.SettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsRequest::IsInitialized() const {
  return true;
}

void SettingsRequest::Swap(SettingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingsRequest::InternalSwap(SettingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SettingsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettingsResult::InitAsDefaultInstance() {
}
class SettingsResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettingsResult::kSettingValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingsResult::SettingsResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.SettingsResult)
}
SettingsResult::SettingsResult(const SettingsResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      setting_values_(from.setting_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.SettingsResult)
}

void SettingsResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SettingsResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
}

SettingsResult::~SettingsResult() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.SettingsResult)
  SharedDtor();
}

void SettingsResult::SharedDtor() {
}

void SettingsResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingsResult& SettingsResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettingsResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void SettingsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.SettingsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  setting_values_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettingsResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettingsResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .muscle_manager_protocol.Setting setting_values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::muscle_manager_protocol::Setting::_InternalParse;
          object = msg->add_setting_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettingsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.SettingsResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .muscle_manager_protocol.Setting setting_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_setting_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.SettingsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.SettingsResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettingsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.SettingsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.Setting setting_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->setting_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->setting_values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.SettingsResult)
}

::google::protobuf::uint8* SettingsResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.SettingsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.Setting setting_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->setting_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->setting_values(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.SettingsResult)
  return target;
}

size_t SettingsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.SettingsResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.Setting setting_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->setting_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->setting_values(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.SettingsResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsResult* source =
      ::google::protobuf::DynamicCastToGenerated<SettingsResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.SettingsResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.SettingsResult)
    MergeFrom(*source);
  }
}

void SettingsResult::MergeFrom(const SettingsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.SettingsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  setting_values_.MergeFrom(from.setting_values_);
}

void SettingsResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.SettingsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsResult::CopyFrom(const SettingsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.SettingsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsResult::IsInitialized() const {
  return true;
}

void SettingsResult::Swap(SettingsResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingsResult::InternalSwap(SettingsResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&setting_values_)->InternalSwap(CastToBase(&other->setting_values_));
}

::google::protobuf::Metadata SettingsResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeregistrationRequest::InitAsDefaultInstance() {
}
class DeregistrationRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeregistrationRequest::kInstanceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregistrationRequest::DeregistrationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.DeregistrationRequest)
}
DeregistrationRequest::DeregistrationRequest(const DeregistrationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance_name().size() > 0) {
    instance_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.DeregistrationRequest)
}

void DeregistrationRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeregistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  instance_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeregistrationRequest::~DeregistrationRequest() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.DeregistrationRequest)
  SharedDtor();
}

void DeregistrationRequest::SharedDtor() {
  instance_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeregistrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeregistrationRequest& DeregistrationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeregistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void DeregistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.DeregistrationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeregistrationRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeregistrationRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string instance_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.DeregistrationRequest.instance_name");
        object = msg->mutable_instance_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeregistrationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.DeregistrationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string instance_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_name().data(), static_cast<int>(this->instance_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.DeregistrationRequest.instance_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.DeregistrationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.DeregistrationRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeregistrationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.DeregistrationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_name().data(), static_cast<int>(this->instance_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.DeregistrationRequest.instance_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instance_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.DeregistrationRequest)
}

::google::protobuf::uint8* DeregistrationRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.DeregistrationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_name().data(), static_cast<int>(this->instance_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.DeregistrationRequest.instance_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.DeregistrationRequest)
  return target;
}

size_t DeregistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.DeregistrationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeregistrationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.DeregistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeregistrationRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeregistrationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.DeregistrationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.DeregistrationRequest)
    MergeFrom(*source);
  }
}

void DeregistrationRequest::MergeFrom(const DeregistrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.DeregistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_name().size() > 0) {

    instance_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
}

void DeregistrationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.DeregistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregistrationRequest::CopyFrom(const DeregistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.DeregistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregistrationRequest::IsInitialized() const {
  return true;
}

void DeregistrationRequest::Swap(DeregistrationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeregistrationRequest::InternalSwap(DeregistrationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  instance_name_.Swap(&other->instance_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DeregistrationRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeregistrationResult::InitAsDefaultInstance() {
}
class DeregistrationResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeregistrationResult::kStatusFieldNumber;
const int DeregistrationResult::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregistrationResult::DeregistrationResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.DeregistrationResult)
}
DeregistrationResult::DeregistrationResult(const DeregistrationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.DeregistrationResult)
}

void DeregistrationResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeregistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

DeregistrationResult::~DeregistrationResult() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.DeregistrationResult)
  SharedDtor();
}

void DeregistrationResult::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeregistrationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeregistrationResult& DeregistrationResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeregistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void DeregistrationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.DeregistrationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeregistrationResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeregistrationResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .muscle_manager_protocol.ResultStatus status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::muscle_manager_protocol::ResultStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string error_message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muscle_manager_protocol.DeregistrationResult.error_message");
        object = msg->mutable_error_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeregistrationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muscle_manager_protocol.DeregistrationResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .muscle_manager_protocol.ResultStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::muscle_manager_protocol::ResultStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muscle_manager_protocol.DeregistrationResult.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muscle_manager_protocol.DeregistrationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muscle_manager_protocol.DeregistrationResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeregistrationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muscle_manager_protocol.DeregistrationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.DeregistrationResult.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muscle_manager_protocol.DeregistrationResult)
}

::google::protobuf::uint8* DeregistrationResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.DeregistrationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.DeregistrationResult.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.DeregistrationResult)
  return target;
}

size_t DeregistrationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.DeregistrationResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeregistrationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.DeregistrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DeregistrationResult* source =
      ::google::protobuf::DynamicCastToGenerated<DeregistrationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.DeregistrationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.DeregistrationResult)
    MergeFrom(*source);
  }
}

void DeregistrationResult::MergeFrom(const DeregistrationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.DeregistrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void DeregistrationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.DeregistrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregistrationResult::CopyFrom(const DeregistrationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.DeregistrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregistrationResult::IsInitialized() const {
  return true;
}

void DeregistrationResult::Swap(DeregistrationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeregistrationResult::InternalSwap(DeregistrationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::google::protobuf::Metadata DeregistrationResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return ::file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace muscle_manager_protocol
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::LogMessage* Arena::CreateMaybeMessage< ::muscle_manager_protocol::LogMessage >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::LogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::LogResult* Arena::CreateMaybeMessage< ::muscle_manager_protocol::LogResult >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::LogResult >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::Port* Arena::CreateMaybeMessage< ::muscle_manager_protocol::Port >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::Port >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::ProfileEvent* Arena::CreateMaybeMessage< ::muscle_manager_protocol::ProfileEvent >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::ProfileEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::Profile* Arena::CreateMaybeMessage< ::muscle_manager_protocol::Profile >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::Profile >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::ProfileResult* Arena::CreateMaybeMessage< ::muscle_manager_protocol::ProfileResult >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::ProfileResult >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::RegistrationRequest* Arena::CreateMaybeMessage< ::muscle_manager_protocol::RegistrationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::RegistrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::RegistrationResult* Arena::CreateMaybeMessage< ::muscle_manager_protocol::RegistrationResult >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::RegistrationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::Conduit* Arena::CreateMaybeMessage< ::muscle_manager_protocol::Conduit >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::Conduit >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::PeerRequest* Arena::CreateMaybeMessage< ::muscle_manager_protocol::PeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::PeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::PeerResult_PeerDimensions* Arena::CreateMaybeMessage< ::muscle_manager_protocol::PeerResult_PeerDimensions >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::PeerResult_PeerDimensions >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::PeerResult_PeerLocations* Arena::CreateMaybeMessage< ::muscle_manager_protocol::PeerResult_PeerLocations >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::PeerResult_PeerLocations >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::PeerResult* Arena::CreateMaybeMessage< ::muscle_manager_protocol::PeerResult >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::PeerResult >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::ListOfDouble* Arena::CreateMaybeMessage< ::muscle_manager_protocol::ListOfDouble >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::ListOfDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::ListOfListOfDouble* Arena::CreateMaybeMessage< ::muscle_manager_protocol::ListOfListOfDouble >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::ListOfListOfDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::Setting* Arena::CreateMaybeMessage< ::muscle_manager_protocol::Setting >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::Setting >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::SettingsRequest* Arena::CreateMaybeMessage< ::muscle_manager_protocol::SettingsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::SettingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::SettingsResult* Arena::CreateMaybeMessage< ::muscle_manager_protocol::SettingsResult >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::SettingsResult >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::DeregistrationRequest* Arena::CreateMaybeMessage< ::muscle_manager_protocol::DeregistrationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::DeregistrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::DeregistrationResult* Arena::CreateMaybeMessage< ::muscle_manager_protocol::DeregistrationResult >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::DeregistrationResult >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
